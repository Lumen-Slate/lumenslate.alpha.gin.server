// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/ai/agent": {
            "post": {
                "description": "Process requests using the AI Agent gRPC service with support for file uploads. Handles text processing, analysis, and generation tasks for educational content.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI Agent"
                ],
                "summary": "Process Request with AI Agent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Teacher ID for context and personalization",
                        "name": "teacherId",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role/context for the AI agent processing",
                        "name": "role",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Message or prompt for the AI agent",
                        "name": "message",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Optional file upload for processing",
                        "name": "file",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Type of the uploaded file (if file is provided)",
                        "name": "fileType",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Creation timestamp (ISO format)",
                        "name": "createdAt",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Update timestamp (ISO format)",
                        "name": "updatedAt",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "AI agent response with processed data and metadata",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body, missing required fields, or file processing error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error during AI processing",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/detect-variables": {
            "post": {
                "description": "Detects variables in the provided question using AI",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Detect variables in a question",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.DetectVariablesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/documents/view/{id}": {
            "get": {
                "description": "Generate a time-limited pre-signed URL to securely view a document stored in Google Cloud Storage. The URL expires after 30 minutes for security purposes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI Document Management"
                ],
                "summary": "Generate Pre-signed URL for Document Viewing",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document ID (unique identifier for the document)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Pre-signed URL generated successfully with document metadata",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid or missing document ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Document not found in database or storage",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error during URL generation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/documents/{id}": {
            "delete": {
                "description": "Delete a document from RAG corpus, Google Cloud Storage, and database using its unique document ID. This is a comprehensive deletion that removes all traces of the document from the system.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI Document Management"
                ],
                "summary": "Delete Document by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document ID (unique identifier for the document to delete)",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document deleted successfully from all systems",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid or missing document ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Document not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error during deletion process",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/filter-randomize": {
            "post": {
                "description": "Filters and randomizes variables in a question using AI",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Filter and randomize variables",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.FilterAndRandomizeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/generate-context": {
            "post": {
                "description": "Generates context using AI for the given question, keywords, and language",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Generate context for a question",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.GenerateContextRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/generate-mcq": {
            "post": {
                "description": "Generates MCQ variations for a question using AI",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Generate MCQ variations",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.GenerateMCQVariationsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/generate-msq": {
            "post": {
                "description": "Generates MSQ variations for a question using AI",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Generate MSQ variations",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.GenerateMSQVariationsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/operations/status": {
            "post": {
                "description": "Check the status of a Vertex AI operation (like RAG file import)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI Operations"
                ],
                "summary": "Check Vertex AI Operation Status",
                "parameters": [
                    {
                        "description": "Operation status request",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.CheckOperationStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation status retrieved successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/rag-agent": {
            "post": {
                "description": "Process text input using Retrieval-Augmented Generation (RAG) agent for intelligent knowledge retrieval and response generation. Creates/verifies teacher-specific corpus automatically.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI RAG Agent"
                ],
                "summary": "Process Text with RAG Agent",
                "parameters": [
                    {
                        "description": "RAG agent request with teacher ID, role, and message",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.RAGAgentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RAG agent response with message, data, and metadata",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing required fields",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "500": {
                        "description": "Internal server error during RAG processing",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/ai/rag-agent/add-corpus-document": {
            "post": {
                "description": "Upload a document file to Google Cloud Storage and enqueue it for asynchronous processing with Vertex AI RAG corpus. Returns immediately with pending status. Supports PDF, TXT, DOCX, DOC, HTML, and MD file formats.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI Document Management"
                ],
                "summary": "Upload Document to RAG Corpus (Async)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the RAG corpus to add the document to",
                        "name": "corpusName",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Document file to upload (supported formats: PDF, TXT, DOCX, DOC, HTML, MD)",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document uploaded successfully and queued for processing with pending status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request, unsupported file type, or missing required fields",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error during upload or task enqueue process",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/rag-agent/corpus/{corpusName}/documents": {
            "get": {
                "description": "List all documents in a specific RAG corpus with cross-verification between database and RAG engine. Returns unified document information including storage status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI RAG Management"
                ],
                "summary": "List Documents in RAG Corpus",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the corpus to list documents for",
                        "name": "corpusName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of documents with unified information from database and RAG engine",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid or missing corpus name",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error during document retrieval",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/rag-agent/create-corpus": {
            "post": {
                "description": "Create a new RAG corpus in Vertex AI for document storage and retrieval. If the corpus already exists, returns the existing corpus information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI RAG Management"
                ],
                "summary": "Create RAG Corpus",
                "parameters": [
                    {
                        "description": "Corpus creation request containing the corpus name",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.CreateCorpusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Corpus created or retrieved successfully with corpus details",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing corpus name",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error during corpus creation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/rag-agent/delete-corpus-document": {
            "post": {
                "description": "Delete a specific document from a RAG corpus using its file identifier (fileId, RAG file ID, or display name). This operation removes the document from the RAG corpus, Google Cloud Storage, and local database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI Document Management"
                ],
                "summary": "Delete Document from RAG Corpus",
                "parameters": [
                    {
                        "description": "Delete corpus document request containing corpus name and file identifier",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.DeleteCorpusDocumentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document deleted successfully with deletion status for each component",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing required fields",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Document or corpus not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error during deletion process",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/rag-agent/document-status/{fileId}": {
            "get": {
                "description": "Retrieve the current processing status of a document by its file ID. Returns status information including processing state, error messages (if any), and last update timestamp.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI Document Management"
                ],
                "summary": "Get Document Processing Status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document file ID (unique identifier for the document)",
                        "name": "fileId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Document status retrieved successfully with fileId, status, errorMsg, and updatedAt",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid or missing file ID parameter",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Document not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error during status retrieval",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/rag-agent/list-all-corpora": {
            "post": {
                "description": "Retrieve a comprehensive list of all RAG corpora available in the Vertex AI project, including their display names, creation times, and update times.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI RAG Management"
                ],
                "summary": "List All RAG Corpora",
                "responses": {
                    "200": {
                        "description": "List of all corpora with their metadata and count",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error during corpora retrieval from Vertex AI",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/rag-agent/list-corpus-content": {
            "post": {
                "description": "List all documents/files inside a RAG corpus",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI RAG Management"
                ],
                "summary": "List RAG Corpus Content",
                "parameters": [
                    {
                        "description": "Request body with corpus name to list content for",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.CreateCorpusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of documents in the corpus with metadata",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body or missing corpus name",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error during content retrieval",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/rag-agent/sync-file-ids": {
            "post": {
                "description": "Find and update missing RAG file IDs in the database by matching with actual RAG engine files",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AI Document Management"
                ],
                "summary": "Sync RAG File IDs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the RAG corpus to sync",
                        "name": "corpusName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Sync completed successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/ai/segment-question": {
            "post": {
                "description": "Segments the provided question using AI",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ai"
                ],
                "summary": "Segment a question",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ai.SegmentQuestionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/assignment-results": {
            "get": {
                "description": "Retrieves all assignment results with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "assignment-results"
                ],
                "summary": "Get all assignment results",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by student ID",
                        "name": "studentId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by assignment ID",
                        "name": "assignmentId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Limit number of results (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new assignment result",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "assignment-results"
                ],
                "summary": "Create assignment result",
                "parameters": [
                    {
                        "description": "Assignment result data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AssignmentResult"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/assignment-results/{id}": {
            "get": {
                "description": "Retrieves a specific assignment result by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "assignment-results"
                ],
                "summary": "Get assignment result by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Assignment Result ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Updates a specific assignment result by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "assignment-results"
                ],
                "summary": "Update assignment result",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Assignment Result ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a specific assignment result by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "assignment-results"
                ],
                "summary": "Delete assignment result",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Assignment Result ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/report-cards": {
            "get": {
                "description": "Retrieves all report cards with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report-cards"
                ],
                "summary": "Get all report cards",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by user ID",
                        "name": "userId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by student ID",
                        "name": "studentId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by academic term",
                        "name": "academicTerm",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Limit number of results (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/report-cards/{id}": {
            "get": {
                "description": "Retrieves a specific report card by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report-cards"
                ],
                "summary": "Get report card by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report Card ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Updates a specific report card by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report-cards"
                ],
                "summary": "Update report card",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report Card ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a specific report card by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "report-cards"
                ],
                "summary": "Delete report card",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report Card ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/students/{studentId}/subject-reports": {
            "get": {
                "description": "Retrieves all subject reports for a specific student",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subject-reports"
                ],
                "summary": "Get subject reports by student ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student ID",
                        "name": "studentId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/subject-reports": {
            "get": {
                "description": "Retrieves all subject reports with optional filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subject-reports"
                ],
                "summary": "Get all subject reports",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by user ID",
                        "name": "userId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by student ID",
                        "name": "studentId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by subject",
                        "name": "subject",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Limit number of results (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset for pagination (default 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/subject-reports/{id}": {
            "get": {
                "description": "Retrieves a specific subject report by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subject-reports"
                ],
                "summary": "Get subject report by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subject Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Updates a specific subject report by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subject-reports"
                ],
                "summary": "Update subject report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subject Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a specific subject report by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subject-reports"
                ],
                "summary": "Delete subject report",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subject Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/admin/subscriptions/process-expired": {
            "post": {
                "description": "Processes subscriptions that have expired and should be cancelled (admin endpoint)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Process expired subscriptions",
                "responses": {
                    "200": {
                        "description": "Processing results",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to process expired subscriptions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/admin/usage-limits/initialize-defaults": {
            "post": {
                "description": "Creates default usage limits for common plans (free, private_tutor, multi_classroom, enterprise_b2b). Admin endpoint.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Limits"
                ],
                "summary": "Initialize default usage limits",
                "responses": {
                    "200": {
                        "description": "Default usage limits initialized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to initialize default usage limits",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/subscriptions": {
            "get": {
                "description": "Retrieves subscriptions filtered by their status",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Get subscriptions by status",
                "parameters": [
                    {
                        "enum": [
                            "active",
                            "scheduled_to_cancel",
                            "cancelled",
                            "inactive"
                        ],
                        "type": "string",
                        "description": "Subscription status",
                        "name": "status",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved subscriptions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Subscription"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to fetch subscriptions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new subscription for a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Create a new subscription",
                "parameters": [
                    {
                        "description": "Subscription data",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created subscription",
                        "schema": {
                            "$ref": "#/definitions/model.Subscription"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/subscriptions/stats": {
            "get": {
                "description": "Returns statistical information about subscriptions",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Get subscription statistics",
                "responses": {
                    "200": {
                        "description": "Subscription statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to fetch subscription statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/subscriptions/user/{id}": {
            "get": {
                "description": "Retrieves the active subscription for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Get active subscription for user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user subscription",
                        "schema": {
                            "$ref": "#/definitions/model.Subscription"
                        }
                    },
                    "404": {
                        "description": "No active subscription found for user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/subscriptions/user/{id}/all": {
            "get": {
                "description": "Retrieves all subscriptions (active and inactive) for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Get all subscriptions for user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user subscriptions",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Subscription"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch user subscriptions",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/subscriptions/user/{id}/status": {
            "get": {
                "description": "Checks if a user has an active subscription",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Check user subscription status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User subscription status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to check subscription status",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/subscriptions/{id}": {
            "get": {
                "description": "Retrieves a specific subscription by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Get subscription by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved subscription",
                        "schema": {
                            "$ref": "#/definitions/model.Subscription"
                        }
                    },
                    "404": {
                        "description": "Subscription not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing subscription",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Update subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated subscription data",
                        "name": "subscription",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateSubscriptionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated subscription",
                        "schema": {
                            "$ref": "#/definitions/model.Subscription"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Immediately cancels an active subscription",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Cancel subscription immediately",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully cancelled subscription",
                        "schema": {
                            "$ref": "#/definitions/model.Subscription"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/subscriptions/{id}/reactivate": {
            "post": {
                "description": "Reactivates a subscription that was scheduled for cancellation",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Reactivate subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully reactivated subscription",
                        "schema": {
                            "$ref": "#/definitions/model.Subscription"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/subscriptions/{id}/renew": {
            "post": {
                "description": "Renews a subscription for the next billing period",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Renew subscription",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Renewal data with new_period_end",
                        "name": "renewal",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully renewed subscription",
                        "schema": {
                            "$ref": "#/definitions/model.Subscription"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/subscriptions/{id}/schedule-cancellation": {
            "post": {
                "description": "Schedules a subscription for cancellation at the end of the current billing period",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subscriptions"
                ],
                "summary": "Schedule subscription cancellation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subscription ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully scheduled cancellation",
                        "schema": {
                            "$ref": "#/definitions/model.Subscription"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage": {
            "get": {
                "description": "Retrieves all usage records with optional filters",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Tracking"
                ],
                "summary": "Get all usage records",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by user ID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by subscription lookup key",
                        "name": "lookup_key",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination limit (default 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination offset (default 0)",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Usage records",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Usage"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch usage records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage-limits": {
            "get": {
                "description": "Retrieves all usage limits with optional filtering by plan name, active status, and pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Limits"
                ],
                "summary": "Get all usage limits",
                "parameters": [
                    {
                        "type": "string",
                        "example": "private_tutor",
                        "description": "Filter by plan name",
                        "name": "plan_name",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "example": true,
                        "description": "Filter by active status",
                        "name": "is_active",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "10",
                        "description": "Pagination limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "example": "0",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved usage limits",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.UsageLimits"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Creates new usage limits for a subscription plan. Supports flexible value types: integers, \"unlimited\", \"custom\", or -1 for unlimited.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Limits"
                ],
                "summary": "Create new usage limits",
                "parameters": [
                    {
                        "description": "Usage limits data",
                        "name": "usageLimits",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.CreateUsageLimitsRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created usage limits",
                        "schema": {
                            "$ref": "#/definitions/model.UsageLimits"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage-limits/check/{userId}": {
            "get": {
                "description": "Checks if user's current usage exceeds their plan limits and returns detailed comparison",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Limits"
                ],
                "summary": "Check user usage against limits",
                "parameters": [
                    {
                        "type": "string",
                        "example": "507f1f77bcf86cd799439013",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "private_tutor",
                        "description": "Plan Name",
                        "name": "planName",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Usage comparison results",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage-limits/plan/{planName}": {
            "get": {
                "description": "Retrieves usage limits by plan name (free, private_tutor, multi_classroom, enterprise_b2b)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Limits"
                ],
                "summary": "Get usage limits by plan name",
                "parameters": [
                    {
                        "type": "string",
                        "example": "private_tutor",
                        "description": "Plan Name",
                        "name": "planName",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved usage limits",
                        "schema": {
                            "$ref": "#/definitions/model.UsageLimits"
                        }
                    },
                    "404": {
                        "description": "Usage limits not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage-limits/stats": {
            "get": {
                "description": "Returns statistical information about usage limits including total counts and active/inactive breakdown",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Limits"
                ],
                "summary": "Get usage limits statistics",
                "responses": {
                    "200": {
                        "description": "Usage limits statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to fetch statistics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage-limits/{id}": {
            "get": {
                "description": "Retrieves usage limits by their ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Limits"
                ],
                "summary": "Get usage limits by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Usage Limits ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved usage limits",
                        "schema": {
                            "$ref": "#/definitions/model.UsageLimits"
                        }
                    },
                    "404": {
                        "description": "Usage limits not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "Updates existing usage limits completely. All fields will be replaced with new values.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Limits"
                ],
                "summary": "Update usage limits",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Usage Limits ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated usage limits data",
                        "name": "usageLimits",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.UpdateUsageLimitsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated usage limits",
                        "schema": {
                            "$ref": "#/definitions/model.UsageLimits"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes usage limits by ID",
                "tags": [
                    "Usage Limits"
                ],
                "summary": "Delete usage limits",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Usage Limits ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted usage limits",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "patch": {
                "description": "Performs partial updates on usage limits. Only specified fields will be updated.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Limits"
                ],
                "summary": "Patch usage limits",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Usage Limits ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated usage limits",
                        "schema": {
                            "$ref": "#/definitions/model.UsageLimits"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage-limits/{id}/deactivate": {
            "post": {
                "description": "Marks usage limits as inactive instead of deleting",
                "tags": [
                    "Usage Limits"
                ],
                "summary": "Soft delete usage limits",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Usage Limits ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deactivated usage limits",
                        "schema": {
                            "$ref": "#/definitions/model.UsageLimits"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage/summary": {
            "get": {
                "description": "Retrieves aggregated usage summary for all users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Tracking"
                ],
                "summary": "Get usage summary",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by subscription lookup key",
                        "name": "lookup_key",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Usage summary",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to fetch usage summary",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage/user/{id}": {
            "get": {
                "description": "Retrieves usage tracking for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Tracking"
                ],
                "summary": "Get usage by user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User usage data",
                        "schema": {
                            "$ref": "#/definitions/model.Usage"
                        }
                    },
                    "404": {
                        "description": "Usage not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to fetch usage",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage/user/{id}/current": {
            "get": {
                "description": "Retrieves current usage metrics for a specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Tracking"
                ],
                "summary": "Get current usage metrics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Current usage metrics",
                        "schema": {
                            "$ref": "#/definitions/model.Usage"
                        }
                    },
                    "500": {
                        "description": "Failed to fetch usage metrics",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage/user/{id}/increment/question-banks": {
            "post": {
                "description": "Increments question bank usage by 1 or specified count",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Tracking"
                ],
                "summary": "Increment question bank usage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Usage count to increment (default 1)",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Usage incremented successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to track usage",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage/user/{id}/increment/questions": {
            "post": {
                "description": "Increments question usage by 1 or specified count",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Tracking"
                ],
                "summary": "Increment question usage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Usage count to increment (default 1)",
                        "name": "count",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Usage incremented successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to track usage",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage/user/{id}/reset": {
            "post": {
                "description": "Resets usage counters for a user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Tracking"
                ],
                "summary": "Reset user usage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Usage reset successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to reset usage",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage/user/{id}/track/ai-generation": {
            "post": {
                "description": "Tracks AI-powered feature usage for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Tracking"
                ],
                "summary": "Track AI generation usage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Usage count",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Usage tracked successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to track usage",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage/user/{id}/track/bulk": {
            "post": {
                "description": "Tracks multiple usage types for a user in a single request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Tracking"
                ],
                "summary": "Track bulk usage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Bulk usage data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/service.BulkUsageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Bulk usage tracked successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to track usage",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage/user/{id}/track/question-banks": {
            "post": {
                "description": "Tracks question bank usage for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Tracking"
                ],
                "summary": "Track question bank usage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Usage count",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Usage tracked successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to track usage",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage/user/{id}/track/questions": {
            "post": {
                "description": "Tracks question usage for a specific user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Tracking"
                ],
                "summary": "Track question usage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Usage count",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Usage tracked successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to track usage",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/usage/{id}": {
            "delete": {
                "description": "Deletes a usage record by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Usage Tracking"
                ],
                "summary": "Delete usage record",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Usage ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Usage deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Failed to delete usage",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/assignments": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assignments"
                ],
                "summary": "Get All Assignments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by points",
                        "name": "points",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by due date",
                        "name": "dueDate",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in title or body (partial match)",
                        "name": "q",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Assignment"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assignments"
                ],
                "summary": "Create Assignment",
                "parameters": [
                    {
                        "description": "Assignment JSON",
                        "name": "assignment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Assignment"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Assignment"
                        }
                    }
                }
            }
        },
        "/assignments/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assignments"
                ],
                "summary": "Get Assignment by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Assignment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Extended view with populated relations",
                        "name": "extended",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/serializer.AssignmentExtended"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assignments"
                ],
                "summary": "Update Assignment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Assignment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Assignment",
                        "name": "assignment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Assignment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Assignment"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Assignments"
                ],
                "summary": "Delete Assignment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Assignment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Assignments"
                ],
                "summary": "Patch Assignment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Assignment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Assignment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/classrooms": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Classrooms"
                ],
                "summary": "Get All Classrooms",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by teacher ID",
                        "name": "teacherId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by tags",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in name (partial match)",
                        "name": "q",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Classroom"
                            }
                        }
                    }
                }
            }
        },
        "/classrooms/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Classrooms"
                ],
                "summary": "Get Classroom by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Classroom ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Classroom"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Classrooms"
                ],
                "summary": "Update Classroom",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Classroom ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Classroom",
                        "name": "classroom",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Classroom"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Classroom"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Classrooms"
                ],
                "summary": "Delete Classroom",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Classroom ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Classrooms"
                ],
                "summary": "Patch Classroom",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Classroom ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Partial updates",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Classroom"
                        }
                    }
                }
            }
        },
        "/comments": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comments"
                ],
                "summary": "Get All Comments",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Comment"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comments"
                ],
                "summary": "Create Comment",
                "parameters": [
                    {
                        "description": "Comment JSON",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Comment"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Comment"
                        }
                    }
                }
            }
        },
        "/comments/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comments"
                ],
                "summary": "Get Comment by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Comment"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comments"
                ],
                "summary": "Update Comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Comment",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Comment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Comment"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Comments"
                ],
                "summary": "Delete Comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Comments"
                ],
                "summary": "Patch a comment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comment ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Comment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Returns basic health status of the application",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Basic Health Check",
                "responses": {
                    "200": {
                        "description": "Application is healthy",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/health/background-processing": {
            "get": {
                "description": "Returns detailed health status of the background processing system including metrics and alerts",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Background Processing Health Check",
                "responses": {
                    "200": {
                        "description": "Background processing system health status",
                        "schema": {
                            "$ref": "#/definitions/service.HealthStatus"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/health/live": {
            "get": {
                "description": "Returns liveness status indicating if the application is alive and should not be restarted",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Liveness Check",
                "responses": {
                    "200": {
                        "description": "Application is alive",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/health/metrics": {
            "get": {
                "description": "Returns detailed system metrics for monitoring and observability",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "System Metrics",
                "responses": {
                    "200": {
                        "description": "System metrics",
                        "schema": {
                            "$ref": "#/definitions/service.SystemMetrics"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/health/metrics/task/{taskType}": {
            "get": {
                "description": "Returns metrics for a specific task type",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Task-specific Metrics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Task type to get metrics for",
                        "name": "taskType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Task metrics",
                        "schema": {
                            "$ref": "#/definitions/service.TaskMetrics"
                        }
                    },
                    "400": {
                        "description": "Invalid task type",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Task type not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/health/ready": {
            "get": {
                "description": "Returns readiness status indicating if the application is ready to serve requests",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health"
                ],
                "summary": "Readiness Check",
                "responses": {
                    "200": {
                        "description": "Application is ready",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "503": {
                        "description": "Application is not ready",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/mcqs": {
            "get": {
                "tags": [
                    "MCQs"
                ],
                "summary": "Get all MCQs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by bank ID",
                        "name": "bankId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/questions.MCQ"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCQs"
                ],
                "summary": "Create MCQ",
                "parameters": [
                    {
                        "description": "MCQ JSON",
                        "name": "mcq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/questions.MCQ"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/questions.MCQ"
                        }
                    }
                }
            }
        },
        "/mcqs/bulk": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCQs"
                ],
                "summary": "Bulk Create MCQs",
                "parameters": [
                    {
                        "description": "List of MCQs",
                        "name": "mcqs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/questions.MCQ"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/questions.MCQ"
                            }
                        }
                    }
                }
            }
        },
        "/mcqs/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCQs"
                ],
                "summary": "Get MCQ by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCQ ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/questions.MCQ"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCQs"
                ],
                "summary": "Update MCQ",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCQ ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated MCQ",
                        "name": "mcq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/questions.MCQ"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/questions.MCQ"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "MCQs"
                ],
                "summary": "Delete MCQ",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCQ ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MCQs"
                ],
                "summary": "Patch MCQ",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MCQ ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updates",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/questions.MCQ"
                        }
                    }
                }
            }
        },
        "/msqs": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MSQs"
                ],
                "summary": "Get All MSQs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by bank ID",
                        "name": "bankId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/questions.MSQ"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MSQs"
                ],
                "summary": "Create MSQ",
                "parameters": [
                    {
                        "description": "MSQ JSON",
                        "name": "msq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/questions.MSQ"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/questions.MSQ"
                        }
                    }
                }
            }
        },
        "/msqs/bulk": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MSQs"
                ],
                "summary": "Bulk Create MSQs",
                "parameters": [
                    {
                        "description": "List of MSQs",
                        "name": "msqs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/questions.MSQ"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/questions.MSQ"
                            }
                        }
                    }
                }
            }
        },
        "/msqs/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MSQs"
                ],
                "summary": "Get MSQ by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MSQ ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/questions.MSQ"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MSQs"
                ],
                "summary": "Update MSQ",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MSQ ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated MSQ",
                        "name": "msq",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/questions.MSQ"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/questions.MSQ"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "MSQs"
                ],
                "summary": "Delete MSQ",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MSQ ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MSQs"
                ],
                "summary": "Patch MSQ",
                "parameters": [
                    {
                        "type": "string",
                        "description": "MSQ ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updates",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/questions.MSQ"
                        }
                    }
                }
            }
        },
        "/nats": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NATs"
                ],
                "summary": "Get All NATs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by bank ID",
                        "name": "bankId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/questions.NAT"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NATs"
                ],
                "summary": "Create NAT",
                "parameters": [
                    {
                        "description": "NAT JSON",
                        "name": "nat",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/questions.NAT"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/questions.NAT"
                        }
                    }
                }
            }
        },
        "/nats/bulk": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NATs"
                ],
                "summary": "Bulk Create NATs",
                "parameters": [
                    {
                        "description": "List of NATs",
                        "name": "nats",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/questions.NAT"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/questions.NAT"
                            }
                        }
                    }
                }
            }
        },
        "/nats/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NATs"
                ],
                "summary": "Get NAT by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "NAT ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/questions.NAT"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NATs"
                ],
                "summary": "Update NAT",
                "parameters": [
                    {
                        "type": "string",
                        "description": "NAT ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated NAT",
                        "name": "nat",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/questions.NAT"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/questions.NAT"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "NATs"
                ],
                "summary": "Delete NAT",
                "parameters": [
                    {
                        "type": "string",
                        "description": "NAT ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NATs"
                ],
                "summary": "Patch NAT",
                "parameters": [
                    {
                        "type": "string",
                        "description": "NAT ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/question-banks": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QuestionBanks"
                ],
                "summary": "Get All QuestionBanks",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by topic",
                        "name": "topic",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by teacher ID",
                        "name": "teacherId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Tags (comma-separated)",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in name (partial match)",
                        "name": "q",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.QuestionBank"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QuestionBanks"
                ],
                "summary": "Create QuestionBank",
                "parameters": [
                    {
                        "description": "QuestionBank JSON",
                        "name": "questionBank",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.QuestionBank"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.QuestionBank"
                        }
                    }
                }
            }
        },
        "/question-banks/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QuestionBanks"
                ],
                "summary": "Get QuestionBank by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "QuestionBank ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.QuestionBank"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QuestionBanks"
                ],
                "summary": "Update QuestionBank",
                "parameters": [
                    {
                        "type": "string",
                        "description": "QuestionBank ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated QuestionBank",
                        "name": "questionBank",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.QuestionBank"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.QuestionBank"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "QuestionBanks"
                ],
                "summary": "Delete QuestionBank",
                "parameters": [
                    {
                        "type": "string",
                        "description": "QuestionBank ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "QuestionBanks"
                ],
                "summary": "Patch QuestionBank",
                "parameters": [
                    {
                        "type": "string",
                        "description": "QuestionBank ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updates",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.QuestionBank"
                        }
                    }
                }
            }
        },
        "/students": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Get All Students",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by email",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by roll number",
                        "name": "rollNo",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by class IDs (comma-separated)",
                        "name": "classIds",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in name or email (partial match, name gets priority)",
                        "name": "q",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Student"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Create Student",
                "parameters": [
                    {
                        "description": "Student JSON",
                        "name": "student",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Student"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Student"
                        }
                    }
                }
            }
        },
        "/students/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Get Student by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Student"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Update Student",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Student",
                        "name": "student",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Student"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Student"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Students"
                ],
                "summary": "Delete Student",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Patch a student",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Student ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Student"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/subjectives": {
            "get": {
                "tags": [
                    "Subjectives"
                ],
                "summary": "Get all Subjectives",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bank ID",
                        "name": "bankId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/questions.Subjective"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subjectives"
                ],
                "summary": "Create Subjective",
                "parameters": [
                    {
                        "description": "Subjective Question",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/questions.Subjective"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/questions.Subjective"
                        }
                    }
                }
            }
        },
        "/subjectives/bulk": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subjectives"
                ],
                "summary": "Bulk Create Subjectives",
                "parameters": [
                    {
                        "description": "List of Subjective Questions",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/questions.Subjective"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/questions.Subjective"
                            }
                        }
                    }
                }
            }
        },
        "/subjectives/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subjectives"
                ],
                "summary": "Get Subjective by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subjective ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/questions.Subjective"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subjectives"
                ],
                "summary": "Update Subjective",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Subjective",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/questions.Subjective"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/questions.Subjective"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Subjectives"
                ],
                "summary": "Delete Subjective",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subjective ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subjectives"
                ],
                "summary": "Patch Subjective",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updates",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/submissions": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submissions"
                ],
                "summary": "Get All Submissions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Submission"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submissions"
                ],
                "summary": "Create Submission",
                "parameters": [
                    {
                        "description": "Submission JSON",
                        "name": "submission",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Submission"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Submission"
                        }
                    }
                }
            }
        },
        "/submissions/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submissions"
                ],
                "summary": "Get Submission by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Submission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Submission"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submissions"
                ],
                "summary": "Update Submission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Submission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Submission",
                        "name": "submission",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Submission"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Submission"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Submissions"
                ],
                "summary": "Delete Submission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Submission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Submissions"
                ],
                "summary": "Patch a submission",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Submission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Submission"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/teachers": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Teachers"
                ],
                "summary": "Get All Teachers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by email",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by phone",
                        "name": "phone",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Teacher"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Teachers"
                ],
                "summary": "Create Teacher",
                "parameters": [
                    {
                        "description": "Teacher JSON",
                        "name": "teacher",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Teacher"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Teacher"
                        }
                    }
                }
            }
        },
        "/teachers/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Teachers"
                ],
                "summary": "Get Teacher by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Teacher ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Teacher"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Teachers"
                ],
                "summary": "Update Teacher",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Teacher ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Teacher",
                        "name": "teacher",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Teacher"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Teacher"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Teachers"
                ],
                "summary": "Delete Teacher",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Teacher ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Teachers"
                ],
                "summary": "Patch Teacher",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Teacher ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updates",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Teacher"
                        }
                    }
                }
            }
        },
        "/threads": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Threads"
                ],
                "summary": "Get All Threads",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by user ID",
                        "name": "userId",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Thread"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Threads"
                ],
                "summary": "Create Thread",
                "parameters": [
                    {
                        "description": "Thread JSON",
                        "name": "thread",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Thread"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Thread"
                        }
                    }
                }
            }
        },
        "/threads/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Threads"
                ],
                "summary": "Get Thread by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Thread"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Threads"
                ],
                "summary": "Update Thread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Thread",
                        "name": "thread",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Thread"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Thread"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Threads"
                ],
                "summary": "Delete Thread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Threads"
                ],
                "summary": "Patch Thread",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Thread ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Thread"
                        }
                    }
                }
            }
        },
        "/variables": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Variables"
                ],
                "summary": "Get All Variables",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Variable"
                            }
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Variables"
                ],
                "summary": "Create Variable",
                "parameters": [
                    {
                        "description": "Variable JSON",
                        "name": "variable",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Variable"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.Variable"
                        }
                    }
                }
            }
        },
        "/variables/bulk": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Variables"
                ],
                "summary": "Bulk Create Variables",
                "parameters": [
                    {
                        "description": "List of Variables",
                        "name": "variables",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Variable"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Variable"
                            }
                        }
                    }
                }
            }
        },
        "/variables/{id}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Variables"
                ],
                "summary": "Get Variable by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Variable ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Variable"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Variables"
                ],
                "summary": "Update Variable",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Variable ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated Variable",
                        "name": "variable",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Variable"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Variable"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Variables"
                ],
                "summary": "Delete Variable",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Variable ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "patch": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Variables"
                ],
                "summary": "Patch Variable",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updates",
                        "name": "updates",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Variable"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ai.CheckOperationStatusRequest": {
            "type": "object",
            "required": [
                "operation_name"
            ],
            "properties": {
                "operation_name": {
                    "type": "string"
                }
            }
        },
        "ai.CreateCorpusRequest": {
            "type": "object",
            "required": [
                "corpusName"
            ],
            "properties": {
                "corpusName": {
                    "type": "string"
                }
            }
        },
        "ai.DeleteCorpusDocumentRequest": {
            "type": "object",
            "required": [
                "corpusName",
                "fileId"
            ],
            "properties": {
                "corpusName": {
                    "type": "string"
                },
                "fileId": {
                    "description": "Can be fileId, RAG file ID, or display name",
                    "type": "string"
                }
            }
        },
        "ai.DetectVariablesRequest": {
            "type": "object",
            "properties": {
                "question": {
                    "type": "string"
                }
            }
        },
        "ai.FilterAndRandomizeRequest": {
            "type": "object",
            "properties": {
                "question": {
                    "type": "string"
                },
                "userPrompt": {
                    "type": "string"
                }
            }
        },
        "ai.GenerateContextRequest": {
            "type": "object",
            "properties": {
                "keywords": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "language": {
                    "type": "string"
                },
                "question": {
                    "type": "string"
                }
            }
        },
        "ai.GenerateMCQVariationsRequest": {
            "type": "object",
            "properties": {
                "answerIndex": {
                    "type": "integer"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "question": {
                    "type": "string"
                }
            }
        },
        "ai.GenerateMSQVariationsRequest": {
            "type": "object",
            "properties": {
                "answerIndices": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "question": {
                    "type": "string"
                }
            }
        },
        "ai.RAGAgentRequest": {
            "type": "object",
            "required": [
                "corpusName",
                "message",
                "role"
            ],
            "properties": {
                "corpusName": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "file": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "ai.SegmentQuestionRequest": {
            "type": "object",
            "properties": {
                "question": {
                    "type": "string"
                }
            }
        },
        "gin.H": {
            "type": "object",
            "additionalProperties": {}
        },
        "model.AILimits": {
            "type": "object",
            "required": [
                "independent_agent",
                "lumen_agent",
                "rag_agent",
                "rag_document_uploads"
            ],
            "properties": {
                "independent_agent": {},
                "lumen_agent": {},
                "rag_agent": {},
                "rag_document_uploads": {}
            }
        },
        "model.Assignment": {
            "type": "object",
            "required": [
                "body",
                "dueDate",
                "points",
                "title"
            ],
            "properties": {
                "body": {
                    "type": "string"
                },
                "commentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "dueDate": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "mcqIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "msqIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "natIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "points": {
                    "type": "integer",
                    "minimum": 0
                },
                "subjectiveIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.AssignmentResult": {
            "type": "object",
            "properties": {
                "assignment_id": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mcq_results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MCQResult"
                    }
                },
                "msq_results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.MSQResult"
                    }
                },
                "nat_results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.NATResult"
                    }
                },
                "percentage_score": {
                    "type": "number"
                },
                "student_id": {
                    "type": "string"
                },
                "subjective_results": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SubjectiveResult"
                    }
                },
                "total_max_points": {
                    "type": "integer"
                },
                "total_points_awarded": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Classroom": {
            "type": "object",
            "required": [
                "name",
                "teacherIds"
            ],
            "properties": {
                "assignmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "classroomCode": {
                    "type": "string"
                },
                "classroomSubject": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "credits": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "teacherIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Comment": {
            "type": "object",
            "required": [
                "commentBody"
            ],
            "properties": {
                "commentBody": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.FeatureUsage": {
            "type": "object",
            "properties": {
                "last_reset": {
                    "type": "string"
                },
                "limit": {
                    "description": "A value of -1 can represent \"unlimited\"",
                    "type": "integer"
                },
                "unit": {
                    "$ref": "#/definitions/model.UsageUnit"
                },
                "value": {
                    "type": "integer"
                }
            }
        },
        "model.MCQResult": {
            "type": "object",
            "properties": {
                "correct_answer": {
                    "type": "integer"
                },
                "is_correct": {
                    "type": "boolean"
                },
                "max_points": {
                    "type": "integer"
                },
                "points_awarded": {
                    "type": "integer"
                },
                "question_id": {
                    "type": "string"
                },
                "student_answer": {
                    "type": "integer"
                }
            }
        },
        "model.MSQResult": {
            "type": "object",
            "properties": {
                "correct_answers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "is_correct": {
                    "type": "boolean"
                },
                "max_points": {
                    "type": "integer"
                },
                "points_awarded": {
                    "type": "integer"
                },
                "question_id": {
                    "type": "string"
                },
                "student_answers": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "model.NATResult": {
            "type": "object",
            "properties": {
                "correct_answer": {
                    "description": "can be int or float"
                },
                "is_correct": {
                    "type": "boolean"
                },
                "max_points": {
                    "type": "integer"
                },
                "points_awarded": {
                    "type": "integer"
                },
                "question_id": {
                    "type": "string"
                },
                "student_answer": {
                    "description": "can be int or float"
                }
            }
        },
        "model.QuestionBank": {
            "type": "object",
            "required": [
                "name",
                "tags",
                "teacherId",
                "topic"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "maxLength": 500
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "tags": {
                    "type": "array",
                    "minItems": 0,
                    "items": {
                        "type": "string"
                    }
                },
                "teacherId": {
                    "type": "string"
                },
                "topic": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Student": {
            "type": "object",
            "required": [
                "email",
                "name"
            ],
            "properties": {
                "classIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "rollNo": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.SubjectiveResult": {
            "type": "object",
            "properties": {
                "assessment_feedback": {
                    "type": "string"
                },
                "criteria_met": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "criteria_missed": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "grading_criteria": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "ideal_answer": {
                    "type": "string"
                },
                "max_points": {
                    "type": "integer"
                },
                "points_awarded": {
                    "type": "integer"
                },
                "question_id": {
                    "type": "string"
                },
                "student_answer": {
                    "type": "string"
                }
            }
        },
        "model.Submission": {
            "type": "object",
            "required": [
                "assignmentId",
                "studentId"
            ],
            "properties": {
                "assignmentId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "mcqAnswers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "msqAnswers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "natAnswers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "integer"
                    }
                },
                "studentId": {
                    "type": "string"
                },
                "subjectiveAnswers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Subscription": {
            "type": "object",
            "required": [
                "currency",
                "lookup_key",
                "status",
                "user_id"
            ],
            "properties": {
                "cancel_at": {
                    "type": "string"
                },
                "cancel_at_period_end": {
                    "type": "boolean"
                },
                "cancelled_at": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "currency": {
                    "type": "string"
                },
                "current_period_end": {
                    "type": "string"
                },
                "current_period_start": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lookup_key": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/model.SubscriptionStatus"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.SubscriptionStatus": {
            "type": "string",
            "enum": [
                "active",
                "scheduled_to_cancel",
                "cancelled",
                "inactive"
            ],
            "x-enum-varnames": [
                "StatusActive",
                "StatusScheduledToCancel",
                "StatusCancelled",
                "StatusInactive"
            ]
        },
        "model.Teacher": {
            "type": "object",
            "required": [
                "email",
                "name"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 3
                },
                "phone": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "model.Thread": {
            "type": "object",
            "required": [
                "body",
                "title",
                "userId"
            ],
            "properties": {
                "attachments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "body": {
                    "type": "string"
                },
                "commentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "model.Usage": {
            "type": "object",
            "required": [
                "lookup_key",
                "user_id"
            ],
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "features": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.FeatureUsage"
                    }
                },
                "id": {
                    "type": "string"
                },
                "lookup_key": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "model.UsageLimits": {
            "type": "object",
            "required": [
                "ai",
                "assignment_exports_per_day",
                "classrooms",
                "plan_name",
                "question_banks",
                "questions",
                "students_per_classroom",
                "teachers"
            ],
            "properties": {
                "ai": {
                    "$ref": "#/definitions/model.AILimits"
                },
                "assignment_exports_per_day": {},
                "classrooms": {},
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "plan_name": {
                    "type": "string"
                },
                "question_banks": {},
                "questions": {},
                "students_per_classroom": {},
                "teachers": {},
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.UsageUnit": {
            "type": "string",
            "enum": [
                "daily",
                "monthly",
                "absolute"
            ],
            "x-enum-varnames": [
                "UnitDaily",
                "UnitMonthly",
                "UnitAbsolute"
            ]
        },
        "model.Variable": {
            "type": "object",
            "required": [
                "name",
                "namePositions",
                "value",
                "valuePositions",
                "variableType"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "namePositions": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                },
                "valuePositions": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "variableType": {
                    "type": "string"
                }
            }
        },
        "questions.MCQ": {
            "type": "object",
            "required": [
                "bankId",
                "difficulty",
                "options",
                "points",
                "question",
                "subject"
            ],
            "properties": {
                "answerIndex": {
                    "type": "integer",
                    "minimum": 0
                },
                "bankId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "difficulty": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "options": {
                    "type": "array",
                    "minItems": 2,
                    "items": {
                        "type": "string"
                    }
                },
                "points": {
                    "type": "integer",
                    "minimum": 1
                },
                "question": {
                    "type": "string",
                    "minLength": 3
                },
                "subject": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "variableIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "questions.MSQ": {
            "type": "object",
            "required": [
                "answerIndices",
                "bankId",
                "difficulty",
                "options",
                "points",
                "question",
                "subject"
            ],
            "properties": {
                "answerIndices": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "integer"
                    }
                },
                "bankId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "difficulty": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "options": {
                    "type": "array",
                    "minItems": 2,
                    "items": {
                        "type": "string"
                    }
                },
                "points": {
                    "type": "integer",
                    "minimum": 1
                },
                "question": {
                    "type": "string",
                    "minLength": 3
                },
                "subject": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "variableIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "questions.NAT": {
            "type": "object",
            "required": [
                "bankId",
                "difficulty",
                "points",
                "question",
                "subject"
            ],
            "properties": {
                "answer": {
                    "type": "number"
                },
                "bankId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "difficulty": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "points": {
                    "type": "integer",
                    "minimum": 1
                },
                "question": {
                    "type": "string",
                    "minLength": 3
                },
                "subject": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "variableIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "questions.Subjective": {
            "type": "object",
            "required": [
                "bankId",
                "difficulty",
                "points",
                "question",
                "subject"
            ],
            "properties": {
                "bankId": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "difficulty": {
                    "type": "string"
                },
                "gradingCriteria": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "idealAnswer": {
                    "type": "string"
                },
                "isActive": {
                    "type": "boolean"
                },
                "points": {
                    "type": "integer",
                    "minimum": 0
                },
                "question": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "variableIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "serializer.AssignmentExtended": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "string"
                },
                "comments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Comment"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "dueDate": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mcqs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/questions.MCQ"
                    }
                },
                "msqs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/questions.MSQ"
                    }
                },
                "nats": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/questions.NAT"
                    }
                },
                "points": {
                    "type": "integer"
                },
                "subjectives": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/questions.Subjective"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "service.Alert": {
            "type": "object",
            "properties": {
                "level": {
                    "description": "\"warning\", \"error\", \"critical\"",
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "timestamp": {
                    "type": "string"
                },
                "type": {
                    "description": "\"high_error_rate\", \"queue_backup\", \"processing_lag\"",
                    "type": "string"
                }
            }
        },
        "service.BulkUsageRequest": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "ai_generations": {
                    "type": "integer"
                },
                "assignment_exports": {
                    "type": "integer"
                },
                "question_banks": {
                    "type": "integer"
                },
                "questions": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "service.CreateSubscriptionRequest": {
            "type": "object",
            "required": [
                "currency",
                "lookup_key",
                "user_id"
            ],
            "properties": {
                "currency": {
                    "type": "string"
                },
                "current_period_end": {
                    "type": "string"
                },
                "current_period_start": {
                    "type": "string"
                },
                "lookup_key": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "service.CreateUsageLimitsRequest": {
            "type": "object",
            "required": [
                "ai",
                "assignment_exports_per_day",
                "classrooms",
                "plan_name",
                "question_banks",
                "questions",
                "students_per_classroom",
                "teachers"
            ],
            "properties": {
                "ai": {
                    "$ref": "#/definitions/model.AILimits"
                },
                "assignment_exports_per_day": {},
                "classrooms": {},
                "plan_name": {
                    "type": "string"
                },
                "question_banks": {},
                "questions": {},
                "students_per_classroom": {},
                "teachers": {}
            }
        },
        "service.HealthStatus": {
            "type": "object",
            "properties": {
                "alerts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.Alert"
                    }
                },
                "healthy": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string"
                },
                "system_metrics": {
                    "$ref": "#/definitions/service.SystemMetrics"
                },
                "task_metrics": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/service.TaskMetrics"
                    }
                },
                "timestamp": {
                    "type": "string"
                },
                "uptime": {
                    "$ref": "#/definitions/time.Duration"
                }
            }
        },
        "service.SystemMetrics": {
            "type": "object",
            "properties": {
                "active_workers": {
                    "type": "integer"
                },
                "last_updated": {
                    "type": "string"
                },
                "overall_success_rate": {
                    "type": "number"
                },
                "processing_lag": {
                    "$ref": "#/definitions/time.Duration"
                },
                "queue_depth": {
                    "type": "integer"
                },
                "total_failed": {
                    "type": "integer"
                },
                "total_processed": {
                    "type": "integer"
                }
            }
        },
        "service.TaskMetrics": {
            "type": "object",
            "properties": {
                "average_duration": {
                    "$ref": "#/definitions/time.Duration"
                },
                "failure_count": {
                    "type": "integer"
                },
                "last_updated": {
                    "type": "string"
                },
                "max_duration": {
                    "$ref": "#/definitions/time.Duration"
                },
                "min_duration": {
                    "$ref": "#/definitions/time.Duration"
                },
                "success_count": {
                    "type": "integer"
                },
                "success_rate": {
                    "type": "number"
                },
                "task_type": {
                    "type": "string"
                },
                "total_count": {
                    "type": "integer"
                }
            }
        },
        "service.UpdateSubscriptionRequest": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string"
                },
                "current_period_end": {
                    "type": "string"
                },
                "current_period_start": {
                    "type": "string"
                },
                "lookup_key": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/model.SubscriptionStatus"
                }
            }
        },
        "service.UpdateUsageLimitsRequest": {
            "type": "object",
            "properties": {
                "ai": {
                    "$ref": "#/definitions/model.AILimits"
                },
                "assignment_exports_per_day": {},
                "classrooms": {},
                "is_active": {
                    "type": "boolean"
                },
                "plan_name": {
                    "type": "string"
                },
                "question_banks": {},
                "questions": {},
                "students_per_classroom": {},
                "teachers": {}
            }
        },
        "time.Duration": {
            "type": "integer",
            "enum": [
                -9223372036854775808,
                9223372036854775807,
                1,
                1000,
                1000000,
                1000000000,
                60000000000,
                3600000000000
            ],
            "x-enum-varnames": [
                "minDuration",
                "maxDuration",
                "Nanosecond",
                "Microsecond",
                "Millisecond",
                "Second",
                "Minute",
                "Hour"
            ]
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Lumen Slate API",
	Description:      "Backend API for managing assignments, questions, classrooms and more.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
