basePath: /
definitions:
  ai.CheckOperationStatusRequest:
    properties:
      operation_name:
        type: string
    required:
    - operation_name
    type: object
  ai.CreateCorpusRequest:
    properties:
      corpusName:
        type: string
    required:
    - corpusName
    type: object
  ai.DeleteCorpusDocumentRequest:
    properties:
      corpusName:
        type: string
      fileId:
        description: Can be fileId, RAG file ID, or display name
        type: string
    required:
    - corpusName
    - fileId
    type: object
  ai.DetectVariablesRequest:
    properties:
      question:
        type: string
    type: object
  ai.FilterAndRandomizeRequest:
    properties:
      question:
        type: string
      userPrompt:
        type: string
    type: object
  ai.GenerateContextRequest:
    properties:
      keywords:
        items:
          type: string
        type: array
      language:
        type: string
      question:
        type: string
    type: object
  ai.GenerateMCQVariationsRequest:
    properties:
      answerIndex:
        type: integer
      options:
        items:
          type: string
        type: array
      question:
        type: string
    type: object
  ai.GenerateMSQVariationsRequest:
    properties:
      answerIndices:
        items:
          type: integer
        type: array
      options:
        items:
          type: string
        type: array
      question:
        type: string
    type: object
  ai.RAGAgentRequest:
    properties:
      corpusName:
        type: string
      createdAt:
        type: string
      file:
        type: string
      message:
        type: string
      role:
        type: string
      updatedAt:
        type: string
    required:
    - corpusName
    - message
    - role
    type: object
  ai.SegmentQuestionRequest:
    properties:
      question:
        type: string
    type: object
  gin.H:
    additionalProperties: {}
    type: object
  model.AILimits:
    properties:
      independent_agent: {}
      lumen_agent: {}
      rag_agent: {}
      rag_document_uploads: {}
    required:
    - independent_agent
    - lumen_agent
    - rag_agent
    - rag_document_uploads
    type: object
  model.Assignment:
    properties:
      body:
        type: string
      commentIds:
        items:
          type: string
        type: array
      createdAt:
        type: string
      dueDate:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      mcqIds:
        items:
          type: string
        type: array
      msqIds:
        items:
          type: string
        type: array
      natIds:
        items:
          type: string
        type: array
      points:
        minimum: 0
        type: integer
      subjectiveIds:
        items:
          type: string
        type: array
      title:
        type: string
      updatedAt:
        type: string
    required:
    - body
    - dueDate
    - points
    - title
    type: object
  model.AssignmentResult:
    properties:
      assignment_id:
        type: string
      createdAt:
        type: string
      id:
        type: string
      mcq_results:
        items:
          $ref: '#/definitions/model.MCQResult'
        type: array
      msq_results:
        items:
          $ref: '#/definitions/model.MSQResult'
        type: array
      nat_results:
        items:
          $ref: '#/definitions/model.NATResult'
        type: array
      percentage_score:
        type: number
      student_id:
        type: string
      subjective_results:
        items:
          $ref: '#/definitions/model.SubjectiveResult'
        type: array
      total_max_points:
        type: integer
      total_points_awarded:
        type: integer
      updatedAt:
        type: string
    type: object
  model.Classroom:
    properties:
      assignmentIds:
        items:
          type: string
        type: array
      classroomCode:
        type: string
      classroomSubject:
        type: string
      createdAt:
        type: string
      credits:
        type: integer
      id:
        type: string
      isActive:
        type: boolean
      name:
        type: string
      tags:
        items:
          type: string
        type: array
      teacherIds:
        items:
          type: string
        type: array
      updatedAt:
        type: string
    required:
    - name
    - teacherIds
    type: object
  model.Comment:
    properties:
      commentBody:
        type: string
      createdAt:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      updatedAt:
        type: string
    required:
    - commentBody
    type: object
  model.FeatureUsage:
    properties:
      last_reset:
        type: string
      limit:
        description: A value of -1 can represent "unlimited"
        type: integer
      unit:
        $ref: '#/definitions/model.UsageUnit'
      value:
        type: integer
    type: object
  model.MCQResult:
    properties:
      correct_answer:
        type: integer
      is_correct:
        type: boolean
      max_points:
        type: integer
      points_awarded:
        type: integer
      question_id:
        type: string
      student_answer:
        type: integer
    type: object
  model.MSQResult:
    properties:
      correct_answers:
        items:
          type: integer
        type: array
      is_correct:
        type: boolean
      max_points:
        type: integer
      points_awarded:
        type: integer
      question_id:
        type: string
      student_answers:
        items:
          type: integer
        type: array
    type: object
  model.NATResult:
    properties:
      correct_answer:
        description: can be int or float
      is_correct:
        type: boolean
      max_points:
        type: integer
      points_awarded:
        type: integer
      question_id:
        type: string
      student_answer:
        description: can be int or float
    type: object
  model.QuestionBank:
    properties:
      createdAt:
        type: string
      description:
        maxLength: 500
        type: string
      id:
        type: string
      isActive:
        type: boolean
      name:
        maxLength: 100
        minLength: 3
        type: string
      tags:
        items:
          type: string
        minItems: 0
        type: array
      teacherId:
        type: string
      topic:
        type: string
      updatedAt:
        type: string
    required:
    - name
    - tags
    - teacherId
    - topic
    type: object
  model.Student:
    properties:
      classIds:
        items:
          type: string
        type: array
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      name:
        type: string
      rollNo:
        type: string
      updatedAt:
        type: string
    required:
    - email
    - name
    type: object
  model.SubjectiveResult:
    properties:
      assessment_feedback:
        type: string
      criteria_met:
        items:
          type: string
        type: array
      criteria_missed:
        items:
          type: string
        type: array
      grading_criteria:
        items:
          type: string
        type: array
      ideal_answer:
        type: string
      max_points:
        type: integer
      points_awarded:
        type: integer
      question_id:
        type: string
      student_answer:
        type: string
    type: object
  model.Submission:
    properties:
      assignmentId:
        type: string
      createdAt:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      mcqAnswers:
        additionalProperties:
          type: string
        type: object
      msqAnswers:
        additionalProperties:
          items:
            type: string
          type: array
        type: object
      natAnswers:
        additionalProperties:
          type: integer
        type: object
      studentId:
        type: string
      subjectiveAnswers:
        additionalProperties:
          type: string
        type: object
      updatedAt:
        type: string
    required:
    - assignmentId
    - studentId
    type: object
  model.Subscription:
    properties:
      cancel_at:
        type: string
      cancel_at_period_end:
        type: boolean
      cancelled_at:
        type: string
      created_at:
        type: string
      currency:
        type: string
      current_period_end:
        type: string
      current_period_start:
        type: string
      id:
        type: string
      lookup_key:
        type: string
      status:
        $ref: '#/definitions/model.SubscriptionStatus'
      updated_at:
        type: string
      user_id:
        type: string
    required:
    - currency
    - lookup_key
    - status
    - user_id
    type: object
  model.SubscriptionStatus:
    enum:
    - active
    - scheduled_to_cancel
    - cancelled
    - inactive
    type: string
    x-enum-varnames:
    - StatusActive
    - StatusScheduledToCancel
    - StatusCancelled
    - StatusInactive
  model.Teacher:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      name:
        maxLength: 100
        minLength: 3
        type: string
      phone:
        type: string
      updatedAt:
        type: string
    required:
    - email
    - name
    type: object
  model.Thread:
    properties:
      attachments:
        items:
          type: string
        type: array
      body:
        type: string
      commentIds:
        items:
          type: string
        type: array
      createdAt:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      title:
        type: string
      updatedAt:
        type: string
      userId:
        type: string
    required:
    - body
    - title
    - userId
    type: object
  model.Usage:
    properties:
      created_at:
        type: string
      features:
        additionalProperties:
          $ref: '#/definitions/model.FeatureUsage'
        type: object
      id:
        type: string
      lookup_key:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    required:
    - lookup_key
    - user_id
    type: object
  model.UsageLimits:
    properties:
      ai:
        $ref: '#/definitions/model.AILimits'
      assignment_exports_per_day: {}
      classrooms: {}
      created_at:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      plan_name:
        type: string
      question_banks: {}
      questions: {}
      students_per_classroom: {}
      teachers: {}
      updated_at:
        type: string
    required:
    - ai
    - assignment_exports_per_day
    - classrooms
    - plan_name
    - question_banks
    - questions
    - students_per_classroom
    - teachers
    type: object
  model.UsageUnit:
    enum:
    - daily
    - monthly
    - absolute
    type: string
    x-enum-varnames:
    - UnitDaily
    - UnitMonthly
    - UnitAbsolute
  model.Variable:
    properties:
      createdAt:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      name:
        type: string
      namePositions:
        items:
          type: integer
        type: array
      updatedAt:
        type: string
      value:
        type: string
      valuePositions:
        items:
          type: integer
        type: array
      variableType:
        type: string
    required:
    - name
    - namePositions
    - value
    - valuePositions
    - variableType
    type: object
  questions.MCQ:
    properties:
      answerIndex:
        minimum: 0
        type: integer
      bankId:
        type: string
      createdAt:
        type: string
      difficulty:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      options:
        items:
          type: string
        minItems: 2
        type: array
      points:
        minimum: 1
        type: integer
      question:
        minLength: 3
        type: string
      subject:
        type: string
      updatedAt:
        type: string
      variableIds:
        items:
          type: string
        type: array
    required:
    - bankId
    - difficulty
    - options
    - points
    - question
    - subject
    type: object
  questions.MSQ:
    properties:
      answerIndices:
        items:
          type: integer
        minItems: 1
        type: array
      bankId:
        type: string
      createdAt:
        type: string
      difficulty:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      options:
        items:
          type: string
        minItems: 2
        type: array
      points:
        minimum: 1
        type: integer
      question:
        minLength: 3
        type: string
      subject:
        type: string
      updatedAt:
        type: string
      variableIds:
        items:
          type: string
        type: array
    required:
    - answerIndices
    - bankId
    - difficulty
    - options
    - points
    - question
    - subject
    type: object
  questions.NAT:
    properties:
      answer:
        type: number
      bankId:
        type: string
      createdAt:
        type: string
      difficulty:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      points:
        minimum: 1
        type: integer
      question:
        minLength: 3
        type: string
      subject:
        type: string
      updatedAt:
        type: string
      variableIds:
        items:
          type: string
        type: array
    required:
    - bankId
    - difficulty
    - points
    - question
    - subject
    type: object
  questions.Subjective:
    properties:
      bankId:
        type: string
      createdAt:
        type: string
      difficulty:
        type: string
      gradingCriteria:
        items:
          type: string
        type: array
      id:
        type: string
      idealAnswer:
        type: string
      isActive:
        type: boolean
      points:
        minimum: 0
        type: integer
      question:
        type: string
      subject:
        type: string
      updatedAt:
        type: string
      variableIds:
        items:
          type: string
        type: array
    required:
    - bankId
    - difficulty
    - points
    - question
    - subject
    type: object
  serializer.AssignmentExtended:
    properties:
      body:
        type: string
      comments:
        items:
          $ref: '#/definitions/model.Comment'
        type: array
      createdAt:
        type: string
      dueDate:
        type: string
      id:
        type: string
      mcqs:
        items:
          $ref: '#/definitions/questions.MCQ'
        type: array
      msqs:
        items:
          $ref: '#/definitions/questions.MSQ'
        type: array
      nats:
        items:
          $ref: '#/definitions/questions.NAT'
        type: array
      points:
        type: integer
      subjectives:
        items:
          $ref: '#/definitions/questions.Subjective'
        type: array
      title:
        type: string
    type: object
  service.Alert:
    properties:
      level:
        description: '"warning", "error", "critical"'
        type: string
      message:
        type: string
      metadata:
        additionalProperties:
          type: string
        type: object
      timestamp:
        type: string
      type:
        description: '"high_error_rate", "queue_backup", "processing_lag"'
        type: string
    type: object
  service.BulkUsageRequest:
    properties:
      ai_generations:
        type: integer
      assignment_exports:
        type: integer
      question_banks:
        type: integer
      questions:
        type: integer
      user_id:
        type: string
    required:
    - user_id
    type: object
  service.CreateSubscriptionRequest:
    properties:
      currency:
        type: string
      current_period_end:
        type: string
      current_period_start:
        type: string
      lookup_key:
        type: string
      user_id:
        type: string
    required:
    - currency
    - lookup_key
    - user_id
    type: object
  service.CreateUsageLimitsRequest:
    properties:
      ai:
        $ref: '#/definitions/model.AILimits'
      assignment_exports_per_day: {}
      classrooms: {}
      plan_name:
        type: string
      question_banks: {}
      questions: {}
      students_per_classroom: {}
      teachers: {}
    required:
    - ai
    - assignment_exports_per_day
    - classrooms
    - plan_name
    - question_banks
    - questions
    - students_per_classroom
    - teachers
    type: object
  service.HealthStatus:
    properties:
      alerts:
        items:
          $ref: '#/definitions/service.Alert'
        type: array
      healthy:
        type: boolean
      status:
        type: string
      system_metrics:
        $ref: '#/definitions/service.SystemMetrics'
      task_metrics:
        additionalProperties:
          $ref: '#/definitions/service.TaskMetrics'
        type: object
      timestamp:
        type: string
      uptime:
        $ref: '#/definitions/time.Duration'
    type: object
  service.SystemMetrics:
    properties:
      active_workers:
        type: integer
      last_updated:
        type: string
      overall_success_rate:
        type: number
      processing_lag:
        $ref: '#/definitions/time.Duration'
      queue_depth:
        type: integer
      total_failed:
        type: integer
      total_processed:
        type: integer
    type: object
  service.TaskMetrics:
    properties:
      average_duration:
        $ref: '#/definitions/time.Duration'
      failure_count:
        type: integer
      last_updated:
        type: string
      max_duration:
        $ref: '#/definitions/time.Duration'
      min_duration:
        $ref: '#/definitions/time.Duration'
      success_count:
        type: integer
      success_rate:
        type: number
      task_type:
        type: string
      total_count:
        type: integer
    type: object
  service.UpdateSubscriptionRequest:
    properties:
      currency:
        type: string
      current_period_end:
        type: string
      current_period_start:
        type: string
      lookup_key:
        type: string
      status:
        $ref: '#/definitions/model.SubscriptionStatus'
    type: object
  service.UpdateUsageLimitsRequest:
    properties:
      ai:
        $ref: '#/definitions/model.AILimits'
      assignment_exports_per_day: {}
      classrooms: {}
      is_active:
        type: boolean
      plan_name:
        type: string
      question_banks: {}
      questions: {}
      students_per_classroom: {}
      teachers: {}
    type: object
  time.Duration:
    enum:
    - -9223372036854775808
    - 9223372036854775807
    - 1
    - 1000
    - 1000000
    - 1000000000
    - 60000000000
    - 3600000000000
    type: integer
    x-enum-varnames:
    - minDuration
    - maxDuration
    - Nanosecond
    - Microsecond
    - Millisecond
    - Second
    - Minute
    - Hour
host: localhost:8080
info:
  contact: {}
  description: Backend API for managing assignments, questions, classrooms and more.
  title: Lumen Slate API
  version: "1.0"
paths:
  /ai/agent:
    post:
      consumes:
      - multipart/form-data
      description: Process requests using the AI Agent gRPC service with support for
        file uploads. Handles text processing, analysis, and generation tasks for
        educational content.
      parameters:
      - description: Teacher ID for context and personalization
        in: formData
        name: teacherId
        required: true
        type: string
      - description: Role/context for the AI agent processing
        in: formData
        name: role
        required: true
        type: string
      - description: Message or prompt for the AI agent
        in: formData
        name: message
        required: true
        type: string
      - description: Optional file upload for processing
        in: formData
        name: file
        type: file
      - description: Type of the uploaded file (if file is provided)
        in: formData
        name: fileType
        type: string
      - description: Creation timestamp (ISO format)
        in: formData
        name: createdAt
        type: string
      - description: Update timestamp (ISO format)
        in: formData
        name: updatedAt
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: AI agent response with processed data and metadata
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body, missing required fields, or file processing
            error
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error during AI processing
          schema:
            additionalProperties: true
            type: object
      summary: Process Request with AI Agent
      tags:
      - AI Agent
  /ai/detect-variables:
    post:
      consumes:
      - application/json
      description: Detects variables in the provided question using AI
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ai.DetectVariablesRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Detect variables in a question
      tags:
      - ai
  /ai/documents/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a document from RAG corpus, Google Cloud Storage, and database
        using its unique document ID. This is a comprehensive deletion that removes
        all traces of the document from the system.
      parameters:
      - description: Document ID (unique identifier for the document to delete)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Document deleted successfully from all systems
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid or missing document ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Document not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error during deletion process
          schema:
            additionalProperties: true
            type: object
      summary: Delete Document by ID
      tags:
      - AI Document Management
  /ai/documents/view/{id}:
    get:
      consumes:
      - application/json
      description: Generate a time-limited pre-signed URL to securely view a document
        stored in Google Cloud Storage. The URL expires after 30 minutes for security
        purposes.
      parameters:
      - description: Document ID (unique identifier for the document)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Pre-signed URL generated successfully with document metadata
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid or missing document ID
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Document not found in database or storage
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error during URL generation
          schema:
            additionalProperties: true
            type: object
      summary: Generate Pre-signed URL for Document Viewing
      tags:
      - AI Document Management
  /ai/filter-randomize:
    post:
      consumes:
      - application/json
      description: Filters and randomizes variables in a question using AI
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ai.FilterAndRandomizeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Filter and randomize variables
      tags:
      - ai
  /ai/generate-context:
    post:
      consumes:
      - application/json
      description: Generates context using AI for the given question, keywords, and
        language
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ai.GenerateContextRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Generate context for a question
      tags:
      - ai
  /ai/generate-mcq:
    post:
      consumes:
      - application/json
      description: Generates MCQ variations for a question using AI
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ai.GenerateMCQVariationsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Generate MCQ variations
      tags:
      - ai
  /ai/generate-msq:
    post:
      consumes:
      - application/json
      description: Generates MSQ variations for a question using AI
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ai.GenerateMSQVariationsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Generate MSQ variations
      tags:
      - ai
  /ai/operations/status:
    post:
      consumes:
      - application/json
      description: Check the status of a Vertex AI operation (like RAG file import)
      parameters:
      - description: Operation status request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ai.CheckOperationStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Operation status retrieved successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Check Vertex AI Operation Status
      tags:
      - AI Operations
  /ai/rag-agent:
    post:
      consumes:
      - application/json
      description: Process text input using Retrieval-Augmented Generation (RAG) agent
        for intelligent knowledge retrieval and response generation. Creates/verifies
        teacher-specific corpus automatically.
      parameters:
      - description: RAG agent request with teacher ID, role, and message
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ai.RAGAgentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: RAG agent response with message, data, and metadata
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body or missing required fields
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error during RAG processing
          schema:
            $ref: '#/definitions/gin.H'
      summary: Process Text with RAG Agent
      tags:
      - AI RAG Agent
  /ai/rag-agent/add-corpus-document:
    post:
      consumes:
      - multipart/form-data
      description: Upload a document file to Google Cloud Storage and enqueue it for
        asynchronous processing with Vertex AI RAG corpus. Returns immediately with
        pending status. Supports PDF, TXT, DOCX, DOC, HTML, and MD file formats.
      parameters:
      - description: Name of the RAG corpus to add the document to
        in: formData
        name: corpusName
        required: true
        type: string
      - description: 'Document file to upload (supported formats: PDF, TXT, DOCX,
          DOC, HTML, MD)'
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Document uploaded successfully and queued for processing with
            pending status
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request, unsupported file type, or missing required
            fields
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error during upload or task enqueue process
          schema:
            additionalProperties: true
            type: object
      summary: Upload Document to RAG Corpus (Async)
      tags:
      - AI Document Management
  /ai/rag-agent/corpus/{corpusName}/documents:
    get:
      consumes:
      - application/json
      description: List all documents in a specific RAG corpus with cross-verification
        between database and RAG engine. Returns unified document information including
        storage status.
      parameters:
      - description: Name of the corpus to list documents for
        in: path
        name: corpusName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of documents with unified information from database and
            RAG engine
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid or missing corpus name
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error during document retrieval
          schema:
            additionalProperties: true
            type: object
      summary: List Documents in RAG Corpus
      tags:
      - AI RAG Management
  /ai/rag-agent/create-corpus:
    post:
      consumes:
      - application/json
      description: Create a new RAG corpus in Vertex AI for document storage and retrieval.
        If the corpus already exists, returns the existing corpus information.
      parameters:
      - description: Corpus creation request containing the corpus name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ai.CreateCorpusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Corpus created or retrieved successfully with corpus details
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body or missing corpus name
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error during corpus creation
          schema:
            additionalProperties: true
            type: object
      summary: Create RAG Corpus
      tags:
      - AI RAG Management
  /ai/rag-agent/delete-corpus-document:
    post:
      consumes:
      - application/json
      description: Delete a specific document from a RAG corpus using its file identifier
        (fileId, RAG file ID, or display name). This operation removes the document
        from the RAG corpus, Google Cloud Storage, and local database.
      parameters:
      - description: Delete corpus document request containing corpus name and file
          identifier
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ai.DeleteCorpusDocumentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Document deleted successfully with deletion status for each
            component
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body or missing required fields
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Document or corpus not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error during deletion process
          schema:
            additionalProperties: true
            type: object
      summary: Delete Document from RAG Corpus
      tags:
      - AI Document Management
  /ai/rag-agent/document-status/{fileId}:
    get:
      consumes:
      - application/json
      description: Retrieve the current processing status of a document by its file
        ID. Returns status information including processing state, error messages
        (if any), and last update timestamp.
      parameters:
      - description: Document file ID (unique identifier for the document)
        in: path
        name: fileId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Document status retrieved successfully with fileId, status,
            errorMsg, and updatedAt
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid or missing file ID parameter
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Document not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error during status retrieval
          schema:
            additionalProperties: true
            type: object
      summary: Get Document Processing Status
      tags:
      - AI Document Management
  /ai/rag-agent/list-all-corpora:
    post:
      consumes:
      - application/json
      description: Retrieve a comprehensive list of all RAG corpora available in the
        Vertex AI project, including their display names, creation times, and update
        times.
      produces:
      - application/json
      responses:
        "200":
          description: List of all corpora with their metadata and count
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error during corpora retrieval from Vertex
            AI
          schema:
            additionalProperties: true
            type: object
      summary: List All RAG Corpora
      tags:
      - AI RAG Management
  /ai/rag-agent/list-corpus-content:
    post:
      consumes:
      - application/json
      description: List all documents/files inside a RAG corpus
      parameters:
      - description: Request body with corpus name to list content for
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ai.CreateCorpusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: List of documents in the corpus with metadata
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request body or missing corpus name
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error during content retrieval
          schema:
            additionalProperties: true
            type: object
      summary: List RAG Corpus Content
      tags:
      - AI RAG Management
  /ai/rag-agent/sync-file-ids:
    post:
      consumes:
      - application/json
      description: Find and update missing RAG file IDs in the database by matching
        with actual RAG engine files
      parameters:
      - description: Name of the RAG corpus to sync
        in: query
        name: corpusName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sync completed successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request parameters
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Sync RAG File IDs
      tags:
      - AI Document Management
  /ai/segment-question:
    post:
      consumes:
      - application/json
      description: Segments the provided question using AI
      parameters:
      - description: Request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/ai.SegmentQuestionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Segment a question
      tags:
      - ai
  /api/assignment-results:
    get:
      consumes:
      - application/json
      description: Retrieves all assignment results with optional filtering
      parameters:
      - description: Filter by student ID
        in: query
        name: studentId
        type: string
      - description: Filter by assignment ID
        in: query
        name: assignmentId
        type: string
      - description: Limit number of results (default 10)
        in: query
        name: limit
        type: string
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get all assignment results
      tags:
      - assignment-results
    post:
      consumes:
      - application/json
      description: Creates a new assignment result
      parameters:
      - description: Assignment result data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.AssignmentResult'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Create assignment result
      tags:
      - assignment-results
  /api/assignment-results/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a specific assignment result by its ID
      parameters:
      - description: Assignment Result ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete assignment result
      tags:
      - assignment-results
    get:
      consumes:
      - application/json
      description: Retrieves a specific assignment result by its ID
      parameters:
      - description: Assignment Result ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get assignment result by ID
      tags:
      - assignment-results
    put:
      consumes:
      - application/json
      description: Updates a specific assignment result by its ID
      parameters:
      - description: Assignment Result ID
        in: path
        name: id
        required: true
        type: string
      - description: Update data
        in: body
        name: body
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update assignment result
      tags:
      - assignment-results
  /api/report-cards:
    get:
      consumes:
      - application/json
      description: Retrieves all report cards with optional filtering
      parameters:
      - description: Filter by user ID
        in: query
        name: userId
        type: string
      - description: Filter by student ID
        in: query
        name: studentId
        type: string
      - description: Filter by academic term
        in: query
        name: academicTerm
        type: string
      - description: Limit number of results (default 10)
        in: query
        name: limit
        type: string
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get all report cards
      tags:
      - report-cards
  /api/report-cards/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a specific report card by its ID
      parameters:
      - description: Report Card ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete report card
      tags:
      - report-cards
    get:
      consumes:
      - application/json
      description: Retrieves a specific report card by its ID
      parameters:
      - description: Report Card ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get report card by ID
      tags:
      - report-cards
    put:
      consumes:
      - application/json
      description: Updates a specific report card by its ID
      parameters:
      - description: Report Card ID
        in: path
        name: id
        required: true
        type: string
      - description: Update data
        in: body
        name: body
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update report card
      tags:
      - report-cards
  /api/students/{studentId}/subject-reports:
    get:
      consumes:
      - application/json
      description: Retrieves all subject reports for a specific student
      parameters:
      - description: Student ID
        in: path
        name: studentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get subject reports by student ID
      tags:
      - subject-reports
  /api/subject-reports:
    get:
      consumes:
      - application/json
      description: Retrieves all subject reports with optional filtering
      parameters:
      - description: Filter by user ID
        in: query
        name: userId
        type: string
      - description: Filter by student ID
        in: query
        name: studentId
        type: string
      - description: Filter by subject
        in: query
        name: subject
        type: string
      - description: Limit number of results (default 10)
        in: query
        name: limit
        type: string
      - description: Offset for pagination (default 0)
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get all subject reports
      tags:
      - subject-reports
  /api/subject-reports/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a specific subject report by its ID
      parameters:
      - description: Subject Report ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Delete subject report
      tags:
      - subject-reports
    get:
      consumes:
      - application/json
      description: Retrieves a specific subject report by its ID
      parameters:
      - description: Subject Report ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Get subject report by ID
      tags:
      - subject-reports
    put:
      consumes:
      - application/json
      description: Updates a specific subject report by its ID
      parameters:
      - description: Subject Report ID
        in: path
        name: id
        required: true
        type: string
      - description: Update data
        in: body
        name: body
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Update subject report
      tags:
      - subject-reports
  /api/v1/admin/subscriptions/process-expired:
    post:
      description: Processes subscriptions that have expired and should be cancelled
        (admin endpoint)
      produces:
      - application/json
      responses:
        "200":
          description: Processing results
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to process expired subscriptions
          schema:
            additionalProperties: true
            type: object
      summary: Process expired subscriptions
      tags:
      - Subscriptions
  /api/v1/admin/usage-limits/initialize-defaults:
    post:
      description: Creates default usage limits for common plans (free, private_tutor,
        multi_classroom, enterprise_b2b). Admin endpoint.
      produces:
      - application/json
      responses:
        "200":
          description: Default usage limits initialized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to initialize default usage limits
          schema:
            additionalProperties: true
            type: object
      summary: Initialize default usage limits
      tags:
      - Usage Limits
  /api/v1/subscriptions:
    get:
      description: Retrieves subscriptions filtered by their status
      parameters:
      - description: Subscription status
        enum:
        - active
        - scheduled_to_cancel
        - cancelled
        - inactive
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved subscriptions
          schema:
            items:
              $ref: '#/definitions/model.Subscription'
            type: array
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to fetch subscriptions
          schema:
            additionalProperties: true
            type: object
      summary: Get subscriptions by status
      tags:
      - Subscriptions
    post:
      consumes:
      - application/json
      description: Creates a new subscription for a user
      parameters:
      - description: Subscription data
        in: body
        name: subscription
        required: true
        schema:
          $ref: '#/definitions/service.CreateSubscriptionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created subscription
          schema:
            $ref: '#/definitions/model.Subscription'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new subscription
      tags:
      - Subscriptions
  /api/v1/subscriptions/{id}:
    delete:
      description: Immediately cancels an active subscription
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully cancelled subscription
          schema:
            $ref: '#/definitions/model.Subscription'
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Cancel subscription immediately
      tags:
      - Subscriptions
    get:
      description: Retrieves a specific subscription by its ID
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved subscription
          schema:
            $ref: '#/definitions/model.Subscription'
        "404":
          description: Subscription not found
          schema:
            additionalProperties: true
            type: object
      summary: Get subscription by ID
      tags:
      - Subscriptions
    put:
      consumes:
      - application/json
      description: Updates an existing subscription
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated subscription data
        in: body
        name: subscription
        required: true
        schema:
          $ref: '#/definitions/service.UpdateSubscriptionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated subscription
          schema:
            $ref: '#/definitions/model.Subscription'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Update subscription
      tags:
      - Subscriptions
  /api/v1/subscriptions/{id}/reactivate:
    post:
      description: Reactivates a subscription that was scheduled for cancellation
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully reactivated subscription
          schema:
            $ref: '#/definitions/model.Subscription'
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Reactivate subscription
      tags:
      - Subscriptions
  /api/v1/subscriptions/{id}/renew:
    post:
      consumes:
      - application/json
      description: Renews a subscription for the next billing period
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      - description: Renewal data with new_period_end
        in: body
        name: renewal
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Successfully renewed subscription
          schema:
            $ref: '#/definitions/model.Subscription'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Renew subscription
      tags:
      - Subscriptions
  /api/v1/subscriptions/{id}/schedule-cancellation:
    post:
      description: Schedules a subscription for cancellation at the end of the current
        billing period
      parameters:
      - description: Subscription ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully scheduled cancellation
          schema:
            $ref: '#/definitions/model.Subscription'
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Schedule subscription cancellation
      tags:
      - Subscriptions
  /api/v1/subscriptions/stats:
    get:
      description: Returns statistical information about subscriptions
      produces:
      - application/json
      responses:
        "200":
          description: Subscription statistics
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to fetch subscription statistics
          schema:
            additionalProperties: true
            type: object
      summary: Get subscription statistics
      tags:
      - Subscriptions
  /api/v1/subscriptions/user/{id}:
    get:
      description: Retrieves the active subscription for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user subscription
          schema:
            $ref: '#/definitions/model.Subscription'
        "404":
          description: No active subscription found for user
          schema:
            additionalProperties: true
            type: object
      summary: Get active subscription for user
      tags:
      - Subscriptions
  /api/v1/subscriptions/user/{id}/all:
    get:
      description: Retrieves all subscriptions (active and inactive) for a specific
        user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user subscriptions
          schema:
            items:
              $ref: '#/definitions/model.Subscription'
            type: array
        "500":
          description: Failed to fetch user subscriptions
          schema:
            additionalProperties: true
            type: object
      summary: Get all subscriptions for user
      tags:
      - Subscriptions
  /api/v1/subscriptions/user/{id}/status:
    get:
      description: Checks if a user has an active subscription
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User subscription status
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to check subscription status
          schema:
            additionalProperties: true
            type: object
      summary: Check user subscription status
      tags:
      - Subscriptions
  /api/v1/usage:
    get:
      description: Retrieves all usage records with optional filters
      parameters:
      - description: Filter by user ID
        in: query
        name: user_id
        type: string
      - description: Filter by subscription lookup key
        in: query
        name: lookup_key
        type: string
      - description: Pagination limit (default 10)
        in: query
        name: limit
        type: string
      - description: Pagination offset (default 0)
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Usage records
          schema:
            items:
              $ref: '#/definitions/model.Usage'
            type: array
        "500":
          description: Failed to fetch usage records
          schema:
            additionalProperties: true
            type: object
      summary: Get all usage records
      tags:
      - Usage Tracking
  /api/v1/usage-limits:
    get:
      description: Retrieves all usage limits with optional filtering by plan name,
        active status, and pagination
      parameters:
      - description: Filter by plan name
        example: private_tutor
        in: query
        name: plan_name
        type: string
      - description: Filter by active status
        example: true
        in: query
        name: is_active
        type: boolean
      - description: Pagination limit
        example: "10"
        in: query
        name: limit
        type: string
      - description: Pagination offset
        example: "0"
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved usage limits
          schema:
            items:
              $ref: '#/definitions/model.UsageLimits'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all usage limits
      tags:
      - Usage Limits
    post:
      consumes:
      - application/json
      description: 'Creates new usage limits for a subscription plan. Supports flexible
        value types: integers, "unlimited", "custom", or -1 for unlimited.'
      parameters:
      - description: Usage limits data
        in: body
        name: usageLimits
        required: true
        schema:
          $ref: '#/definitions/service.CreateUsageLimitsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created usage limits
          schema:
            $ref: '#/definitions/model.UsageLimits'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create new usage limits
      tags:
      - Usage Limits
  /api/v1/usage-limits/{id}:
    delete:
      description: Deletes usage limits by ID
      parameters:
      - description: Usage Limits ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Successfully deleted usage limits
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Delete usage limits
      tags:
      - Usage Limits
    get:
      description: Retrieves usage limits by their ID
      parameters:
      - description: Usage Limits ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved usage limits
          schema:
            $ref: '#/definitions/model.UsageLimits'
        "404":
          description: Usage limits not found
          schema:
            additionalProperties: true
            type: object
      summary: Get usage limits by ID
      tags:
      - Usage Limits
    patch:
      consumes:
      - application/json
      description: Performs partial updates on usage limits. Only specified fields
        will be updated.
      parameters:
      - description: Usage Limits ID
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated usage limits
          schema:
            $ref: '#/definitions/model.UsageLimits'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Patch usage limits
      tags:
      - Usage Limits
    put:
      consumes:
      - application/json
      description: Updates existing usage limits completely. All fields will be replaced
        with new values.
      parameters:
      - description: Usage Limits ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated usage limits data
        in: body
        name: usageLimits
        required: true
        schema:
          $ref: '#/definitions/service.UpdateUsageLimitsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated usage limits
          schema:
            $ref: '#/definitions/model.UsageLimits'
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Update usage limits
      tags:
      - Usage Limits
  /api/v1/usage-limits/{id}/deactivate:
    post:
      description: Marks usage limits as inactive instead of deleting
      parameters:
      - description: Usage Limits ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Successfully deactivated usage limits
          schema:
            $ref: '#/definitions/model.UsageLimits'
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Soft delete usage limits
      tags:
      - Usage Limits
  /api/v1/usage-limits/check/{userId}:
    get:
      description: Checks if user's current usage exceeds their plan limits and returns
        detailed comparison
      parameters:
      - description: User ID
        example: 507f1f77bcf86cd799439013
        in: path
        name: userId
        required: true
        type: string
      - description: Plan Name
        example: private_tutor
        in: query
        name: planName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Usage comparison results
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Check user usage against limits
      tags:
      - Usage Limits
  /api/v1/usage-limits/plan/{planName}:
    get:
      description: Retrieves usage limits by plan name (free, private_tutor, multi_classroom,
        enterprise_b2b)
      parameters:
      - description: Plan Name
        example: private_tutor
        in: path
        name: planName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved usage limits
          schema:
            $ref: '#/definitions/model.UsageLimits'
        "404":
          description: Usage limits not found
          schema:
            additionalProperties: true
            type: object
      summary: Get usage limits by plan name
      tags:
      - Usage Limits
  /api/v1/usage-limits/stats:
    get:
      description: Returns statistical information about usage limits including total
        counts and active/inactive breakdown
      produces:
      - application/json
      responses:
        "200":
          description: Usage limits statistics
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to fetch statistics
          schema:
            additionalProperties: true
            type: object
      summary: Get usage limits statistics
      tags:
      - Usage Limits
  /api/v1/usage/{id}:
    delete:
      description: Deletes a usage record by ID
      parameters:
      - description: Usage ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Usage deleted successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to delete usage
          schema:
            additionalProperties: true
            type: object
      summary: Delete usage record
      tags:
      - Usage Tracking
  /api/v1/usage/summary:
    get:
      description: Retrieves aggregated usage summary for all users
      parameters:
      - description: Filter by subscription lookup key
        in: query
        name: lookup_key
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Usage summary
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to fetch usage summary
          schema:
            additionalProperties: true
            type: object
      summary: Get usage summary
      tags:
      - Usage Tracking
  /api/v1/usage/user/{id}:
    get:
      description: Retrieves usage tracking for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User usage data
          schema:
            $ref: '#/definitions/model.Usage'
        "404":
          description: Usage not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to fetch usage
          schema:
            additionalProperties: true
            type: object
      summary: Get usage by user
      tags:
      - Usage Tracking
  /api/v1/usage/user/{id}/current:
    get:
      description: Retrieves current usage metrics for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Current usage metrics
          schema:
            $ref: '#/definitions/model.Usage'
        "500":
          description: Failed to fetch usage metrics
          schema:
            additionalProperties: true
            type: object
      summary: Get current usage metrics
      tags:
      - Usage Tracking
  /api/v1/usage/user/{id}/increment/question-banks:
    post:
      description: Increments question bank usage by 1 or specified count
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Usage count to increment (default 1)
        in: query
        name: count
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Usage incremented successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to track usage
          schema:
            additionalProperties: true
            type: object
      summary: Increment question bank usage
      tags:
      - Usage Tracking
  /api/v1/usage/user/{id}/increment/questions:
    post:
      description: Increments question usage by 1 or specified count
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Usage count to increment (default 1)
        in: query
        name: count
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Usage incremented successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to track usage
          schema:
            additionalProperties: true
            type: object
      summary: Increment question usage
      tags:
      - Usage Tracking
  /api/v1/usage/user/{id}/reset:
    post:
      description: Resets usage counters for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Usage reset successfully
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to reset usage
          schema:
            additionalProperties: true
            type: object
      summary: Reset user usage
      tags:
      - Usage Tracking
  /api/v1/usage/user/{id}/track/ai-generation:
    post:
      consumes:
      - application/json
      description: Tracks AI-powered feature usage for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Usage count
        in: body
        name: body
        required: true
        schema:
          additionalProperties:
            type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Usage tracked successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to track usage
          schema:
            additionalProperties: true
            type: object
      summary: Track AI generation usage
      tags:
      - Usage Tracking
  /api/v1/usage/user/{id}/track/bulk:
    post:
      consumes:
      - application/json
      description: Tracks multiple usage types for a user in a single request
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Bulk usage data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/service.BulkUsageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Bulk usage tracked successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to track usage
          schema:
            additionalProperties: true
            type: object
      summary: Track bulk usage
      tags:
      - Usage Tracking
  /api/v1/usage/user/{id}/track/question-banks:
    post:
      consumes:
      - application/json
      description: Tracks question bank usage for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Usage count
        in: body
        name: body
        required: true
        schema:
          additionalProperties:
            type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Usage tracked successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to track usage
          schema:
            additionalProperties: true
            type: object
      summary: Track question bank usage
      tags:
      - Usage Tracking
  /api/v1/usage/user/{id}/track/questions:
    post:
      consumes:
      - application/json
      description: Tracks question usage for a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Usage count
        in: body
        name: body
        required: true
        schema:
          additionalProperties:
            type: integer
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Usage tracked successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Failed to track usage
          schema:
            additionalProperties: true
            type: object
      summary: Track question usage
      tags:
      - Usage Tracking
  /assignments:
    get:
      parameters:
      - description: Filter by points
        in: query
        name: points
        type: string
      - description: Filter by due date
        in: query
        name: dueDate
        type: string
      - description: Search in title or body (partial match)
        in: query
        name: q
        type: string
      - description: Pagination limit
        in: query
        name: limit
        type: string
      - description: Pagination offset
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Assignment'
            type: array
      summary: Get All Assignments
      tags:
      - Assignments
    post:
      consumes:
      - application/json
      parameters:
      - description: Assignment JSON
        in: body
        name: assignment
        required: true
        schema:
          $ref: '#/definitions/model.Assignment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Assignment'
      summary: Create Assignment
      tags:
      - Assignments
  /assignments/{id}:
    delete:
      parameters:
      - description: Assignment ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete Assignment
      tags:
      - Assignments
    get:
      parameters:
      - description: Assignment ID
        in: path
        name: id
        required: true
        type: string
      - description: Extended view with populated relations
        in: query
        name: extended
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializer.AssignmentExtended'
      summary: Get Assignment by ID
      tags:
      - Assignments
    patch:
      consumes:
      - application/json
      parameters:
      - description: Assignment ID
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Assignment'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Patch Assignment
      tags:
      - Assignments
    put:
      consumes:
      - application/json
      parameters:
      - description: Assignment ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Assignment
        in: body
        name: assignment
        required: true
        schema:
          $ref: '#/definitions/model.Assignment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Assignment'
      summary: Update Assignment
      tags:
      - Assignments
  /classrooms:
    get:
      parameters:
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Offset
        in: query
        name: offset
        type: string
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by teacher ID
        in: query
        name: teacherId
        type: string
      - description: Filter by tags
        in: query
        name: tags
        type: string
      - description: Search in name (partial match)
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Classroom'
            type: array
      summary: Get All Classrooms
      tags:
      - Classrooms
  /classrooms/{id}:
    delete:
      parameters:
      - description: Classroom ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete Classroom
      tags:
      - Classrooms
    get:
      parameters:
      - description: Classroom ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Classroom'
      summary: Get Classroom by ID
      tags:
      - Classrooms
    patch:
      consumes:
      - application/json
      parameters:
      - description: Classroom ID
        in: path
        name: id
        required: true
        type: string
      - description: Partial updates
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Classroom'
      summary: Patch Classroom
      tags:
      - Classrooms
    put:
      consumes:
      - application/json
      parameters:
      - description: Classroom ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Classroom
        in: body
        name: classroom
        required: true
        schema:
          $ref: '#/definitions/model.Classroom'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Classroom'
      summary: Update Classroom
      tags:
      - Classrooms
  /comments:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Comment'
            type: array
      summary: Get All Comments
      tags:
      - Comments
    post:
      consumes:
      - application/json
      parameters:
      - description: Comment JSON
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/model.Comment'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Comment'
      summary: Create Comment
      tags:
      - Comments
  /comments/{id}:
    delete:
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete Comment
      tags:
      - Comments
    get:
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Comment'
      summary: Get Comment by ID
      tags:
      - Comments
    patch:
      consumes:
      - application/json
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Comment'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Patch a comment
      tags:
      - Comments
    put:
      consumes:
      - application/json
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Comment
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/model.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Comment'
      summary: Update Comment
      tags:
      - Comments
  /health:
    get:
      description: Returns basic health status of the application
      produces:
      - application/json
      responses:
        "200":
          description: Application is healthy
          schema:
            additionalProperties: true
            type: object
      summary: Basic Health Check
      tags:
      - Health
  /health/background-processing:
    get:
      description: Returns detailed health status of the background processing system
        including metrics and alerts
      produces:
      - application/json
      responses:
        "200":
          description: Background processing system health status
          schema:
            $ref: '#/definitions/service.HealthStatus'
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Background Processing Health Check
      tags:
      - Health
  /health/live:
    get:
      description: Returns liveness status indicating if the application is alive
        and should not be restarted
      produces:
      - application/json
      responses:
        "200":
          description: Application is alive
          schema:
            additionalProperties: true
            type: object
      summary: Liveness Check
      tags:
      - Health
  /health/metrics:
    get:
      description: Returns detailed system metrics for monitoring and observability
      produces:
      - application/json
      responses:
        "200":
          description: System metrics
          schema:
            $ref: '#/definitions/service.SystemMetrics'
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: System Metrics
      tags:
      - Health
  /health/metrics/task/{taskType}:
    get:
      description: Returns metrics for a specific task type
      parameters:
      - description: Task type to get metrics for
        in: path
        name: taskType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Task metrics
          schema:
            $ref: '#/definitions/service.TaskMetrics'
        "400":
          description: Invalid task type
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Task type not found
          schema:
            additionalProperties: true
            type: object
      summary: Task-specific Metrics
      tags:
      - Health
  /health/ready:
    get:
      description: Returns readiness status indicating if the application is ready
        to serve requests
      produces:
      - application/json
      responses:
        "200":
          description: Application is ready
          schema:
            additionalProperties: true
            type: object
        "503":
          description: Application is not ready
          schema:
            additionalProperties: true
            type: object
      summary: Readiness Check
      tags:
      - Health
  /mcqs:
    get:
      parameters:
      - description: Filter by bank ID
        in: query
        name: bankId
        type: string
      - description: Pagination limit
        in: query
        name: limit
        type: string
      - description: Pagination offset
        in: query
        name: offset
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/questions.MCQ'
            type: array
      summary: Get all MCQs
      tags:
      - MCQs
    post:
      consumes:
      - application/json
      parameters:
      - description: MCQ JSON
        in: body
        name: mcq
        required: true
        schema:
          $ref: '#/definitions/questions.MCQ'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/questions.MCQ'
      summary: Create MCQ
      tags:
      - MCQs
  /mcqs/{id}:
    delete:
      parameters:
      - description: MCQ ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete MCQ
      tags:
      - MCQs
    get:
      parameters:
      - description: MCQ ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/questions.MCQ'
      summary: Get MCQ by ID
      tags:
      - MCQs
    patch:
      consumes:
      - application/json
      parameters:
      - description: MCQ ID
        in: path
        name: id
        required: true
        type: string
      - description: Updates
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/questions.MCQ'
      summary: Patch MCQ
      tags:
      - MCQs
    put:
      consumes:
      - application/json
      parameters:
      - description: MCQ ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated MCQ
        in: body
        name: mcq
        required: true
        schema:
          $ref: '#/definitions/questions.MCQ'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/questions.MCQ'
      summary: Update MCQ
      tags:
      - MCQs
  /mcqs/bulk:
    post:
      consumes:
      - application/json
      parameters:
      - description: List of MCQs
        in: body
        name: mcqs
        required: true
        schema:
          items:
            $ref: '#/definitions/questions.MCQ'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/questions.MCQ'
            type: array
      summary: Bulk Create MCQs
      tags:
      - MCQs
  /msqs:
    get:
      parameters:
      - description: Filter by bank ID
        in: query
        name: bankId
        type: string
      - description: Pagination limit
        in: query
        name: limit
        type: string
      - description: Pagination offset
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/questions.MSQ'
            type: array
      summary: Get All MSQs
      tags:
      - MSQs
    post:
      consumes:
      - application/json
      parameters:
      - description: MSQ JSON
        in: body
        name: msq
        required: true
        schema:
          $ref: '#/definitions/questions.MSQ'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/questions.MSQ'
      summary: Create MSQ
      tags:
      - MSQs
  /msqs/{id}:
    delete:
      parameters:
      - description: MSQ ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete MSQ
      tags:
      - MSQs
    get:
      parameters:
      - description: MSQ ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/questions.MSQ'
      summary: Get MSQ by ID
      tags:
      - MSQs
    patch:
      consumes:
      - application/json
      parameters:
      - description: MSQ ID
        in: path
        name: id
        required: true
        type: string
      - description: Updates
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/questions.MSQ'
      summary: Patch MSQ
      tags:
      - MSQs
    put:
      consumes:
      - application/json
      parameters:
      - description: MSQ ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated MSQ
        in: body
        name: msq
        required: true
        schema:
          $ref: '#/definitions/questions.MSQ'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/questions.MSQ'
      summary: Update MSQ
      tags:
      - MSQs
  /msqs/bulk:
    post:
      consumes:
      - application/json
      parameters:
      - description: List of MSQs
        in: body
        name: msqs
        required: true
        schema:
          items:
            $ref: '#/definitions/questions.MSQ'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/questions.MSQ'
            type: array
      summary: Bulk Create MSQs
      tags:
      - MSQs
  /nats:
    get:
      parameters:
      - description: Filter by bank ID
        in: query
        name: bankId
        type: string
      - description: Pagination limit
        in: query
        name: limit
        type: string
      - description: Pagination offset
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/questions.NAT'
            type: array
      summary: Get All NATs
      tags:
      - NATs
    post:
      consumes:
      - application/json
      parameters:
      - description: NAT JSON
        in: body
        name: nat
        required: true
        schema:
          $ref: '#/definitions/questions.NAT'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/questions.NAT'
      summary: Create NAT
      tags:
      - NATs
  /nats/{id}:
    delete:
      parameters:
      - description: NAT ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete NAT
      tags:
      - NATs
    get:
      parameters:
      - description: NAT ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/questions.NAT'
      summary: Get NAT by ID
      tags:
      - NATs
    patch:
      consumes:
      - application/json
      parameters:
      - description: NAT ID
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Patch NAT
      tags:
      - NATs
    put:
      consumes:
      - application/json
      parameters:
      - description: NAT ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated NAT
        in: body
        name: nat
        required: true
        schema:
          $ref: '#/definitions/questions.NAT'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/questions.NAT'
      summary: Update NAT
      tags:
      - NATs
  /nats/bulk:
    post:
      consumes:
      - application/json
      parameters:
      - description: List of NATs
        in: body
        name: nats
        required: true
        schema:
          items:
            $ref: '#/definitions/questions.NAT'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/questions.NAT'
            type: array
      summary: Bulk Create NATs
      tags:
      - NATs
  /question-banks:
    get:
      parameters:
      - description: Filter by topic
        in: query
        name: topic
        type: string
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Filter by teacher ID
        in: query
        name: teacherId
        type: string
      - description: Tags (comma-separated)
        in: query
        name: tags
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Offset
        in: query
        name: offset
        type: string
      - description: Search in name (partial match)
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.QuestionBank'
            type: array
      summary: Get All QuestionBanks
      tags:
      - QuestionBanks
    post:
      consumes:
      - application/json
      parameters:
      - description: QuestionBank JSON
        in: body
        name: questionBank
        required: true
        schema:
          $ref: '#/definitions/model.QuestionBank'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.QuestionBank'
      summary: Create QuestionBank
      tags:
      - QuestionBanks
  /question-banks/{id}:
    delete:
      parameters:
      - description: QuestionBank ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete QuestionBank
      tags:
      - QuestionBanks
    get:
      parameters:
      - description: QuestionBank ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.QuestionBank'
      summary: Get QuestionBank by ID
      tags:
      - QuestionBanks
    patch:
      consumes:
      - application/json
      parameters:
      - description: QuestionBank ID
        in: path
        name: id
        required: true
        type: string
      - description: Updates
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.QuestionBank'
      summary: Patch QuestionBank
      tags:
      - QuestionBanks
    put:
      consumes:
      - application/json
      parameters:
      - description: QuestionBank ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated QuestionBank
        in: body
        name: questionBank
        required: true
        schema:
          $ref: '#/definitions/model.QuestionBank'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.QuestionBank'
      summary: Update QuestionBank
      tags:
      - QuestionBanks
  /students:
    get:
      parameters:
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Offset
        in: query
        name: offset
        type: string
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: Filter by roll number
        in: query
        name: rollNo
        type: string
      - description: Filter by class IDs (comma-separated)
        in: query
        name: classIds
        type: string
      - description: Search in name or email (partial match, name gets priority)
        in: query
        name: q
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Student'
            type: array
      summary: Get All Students
      tags:
      - Students
    post:
      consumes:
      - application/json
      parameters:
      - description: Student JSON
        in: body
        name: student
        required: true
        schema:
          $ref: '#/definitions/model.Student'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Student'
      summary: Create Student
      tags:
      - Students
  /students/{id}:
    delete:
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete Student
      tags:
      - Students
    get:
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Student'
      summary: Get Student by ID
      tags:
      - Students
    patch:
      consumes:
      - application/json
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Student'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Patch a student
      tags:
      - Students
    put:
      consumes:
      - application/json
      parameters:
      - description: Student ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Student
        in: body
        name: student
        required: true
        schema:
          $ref: '#/definitions/model.Student'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Student'
      summary: Update Student
      tags:
      - Students
  /subjectives:
    get:
      parameters:
      - description: Bank ID
        in: query
        name: bankId
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Offset
        in: query
        name: offset
        type: string
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/questions.Subjective'
            type: array
      summary: Get all Subjectives
      tags:
      - Subjectives
    post:
      consumes:
      - application/json
      parameters:
      - description: Subjective Question
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/questions.Subjective'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/questions.Subjective'
      summary: Create Subjective
      tags:
      - Subjectives
  /subjectives/{id}:
    delete:
      parameters:
      - description: Subjective ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete Subjective
      tags:
      - Subjectives
    get:
      parameters:
      - description: Subjective ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/questions.Subjective'
      summary: Get Subjective by ID
      tags:
      - Subjectives
    patch:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Updates
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Patch Subjective
      tags:
      - Subjectives
    put:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Subjective
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/questions.Subjective'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/questions.Subjective'
      summary: Update Subjective
      tags:
      - Subjectives
  /subjectives/bulk:
    post:
      consumes:
      - application/json
      parameters:
      - description: List of Subjective Questions
        in: body
        name: data
        required: true
        schema:
          items:
            $ref: '#/definitions/questions.Subjective'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/questions.Subjective'
            type: array
      summary: Bulk Create Subjectives
      tags:
      - Subjectives
  /submissions:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Submission'
            type: array
      summary: Get All Submissions
      tags:
      - Submissions
    post:
      consumes:
      - application/json
      parameters:
      - description: Submission JSON
        in: body
        name: submission
        required: true
        schema:
          $ref: '#/definitions/model.Submission'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Submission'
      summary: Create Submission
      tags:
      - Submissions
  /submissions/{id}:
    delete:
      parameters:
      - description: Submission ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete Submission
      tags:
      - Submissions
    get:
      parameters:
      - description: Submission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Submission'
      summary: Get Submission by ID
      tags:
      - Submissions
    patch:
      consumes:
      - application/json
      parameters:
      - description: Submission ID
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Submission'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Patch a submission
      tags:
      - Submissions
    put:
      consumes:
      - application/json
      parameters:
      - description: Submission ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Submission
        in: body
        name: submission
        required: true
        schema:
          $ref: '#/definitions/model.Submission'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Submission'
      summary: Update Submission
      tags:
      - Submissions
  /teachers:
    get:
      parameters:
      - description: Filter by email
        in: query
        name: email
        type: string
      - description: Filter by phone
        in: query
        name: phone
        type: string
      - description: Filter by name
        in: query
        name: name
        type: string
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Offset
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Teacher'
            type: array
      summary: Get All Teachers
      tags:
      - Teachers
    post:
      consumes:
      - application/json
      parameters:
      - description: Teacher JSON
        in: body
        name: teacher
        required: true
        schema:
          $ref: '#/definitions/model.Teacher'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Teacher'
      summary: Create Teacher
      tags:
      - Teachers
  /teachers/{id}:
    delete:
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete Teacher
      tags:
      - Teachers
    get:
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Teacher'
      summary: Get Teacher by ID
      tags:
      - Teachers
    patch:
      consumes:
      - application/json
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: string
      - description: Updates
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Teacher'
      summary: Patch Teacher
      tags:
      - Teachers
    put:
      consumes:
      - application/json
      parameters:
      - description: Teacher ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Teacher
        in: body
        name: teacher
        required: true
        schema:
          $ref: '#/definitions/model.Teacher'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Teacher'
      summary: Update Teacher
      tags:
      - Teachers
  /threads:
    get:
      parameters:
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Offset
        in: query
        name: offset
        type: string
      - description: Filter by user ID
        in: query
        name: userId
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Thread'
            type: array
      summary: Get All Threads
      tags:
      - Threads
    post:
      consumes:
      - application/json
      parameters:
      - description: Thread JSON
        in: body
        name: thread
        required: true
        schema:
          $ref: '#/definitions/model.Thread'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Thread'
      summary: Create Thread
      tags:
      - Threads
  /threads/{id}:
    delete:
      parameters:
      - description: Thread ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete Thread
      tags:
      - Threads
    get:
      parameters:
      - description: Thread ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Thread'
      summary: Get Thread by ID
      tags:
      - Threads
    patch:
      consumes:
      - application/json
      parameters:
      - description: Thread ID
        in: path
        name: id
        required: true
        type: string
      - description: Fields to update
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Thread'
      summary: Patch Thread
      tags:
      - Threads
    put:
      consumes:
      - application/json
      parameters:
      - description: Thread ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Thread
        in: body
        name: thread
        required: true
        schema:
          $ref: '#/definitions/model.Thread'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Thread'
      summary: Update Thread
      tags:
      - Threads
  /variables:
    get:
      parameters:
      - description: Limit
        in: query
        name: limit
        type: string
      - description: Offset
        in: query
        name: offset
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Variable'
            type: array
      summary: Get All Variables
      tags:
      - Variables
    post:
      consumes:
      - application/json
      parameters:
      - description: Variable JSON
        in: body
        name: variable
        required: true
        schema:
          $ref: '#/definitions/model.Variable'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.Variable'
      summary: Create Variable
      tags:
      - Variables
  /variables/{id}:
    delete:
      parameters:
      - description: Variable ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete Variable
      tags:
      - Variables
    get:
      parameters:
      - description: Variable ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Variable'
      summary: Get Variable by ID
      tags:
      - Variables
    patch:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Updates
        in: body
        name: updates
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Variable'
      summary: Patch Variable
      tags:
      - Variables
    put:
      consumes:
      - application/json
      parameters:
      - description: Variable ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Variable
        in: body
        name: variable
        required: true
        schema:
          $ref: '#/definitions/model.Variable'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Variable'
      summary: Update Variable
      tags:
      - Variables
  /variables/bulk:
    post:
      consumes:
      - application/json
      parameters:
      - description: List of Variables
        in: body
        name: variables
        required: true
        schema:
          items:
            $ref: '#/definitions/model.Variable'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/model.Variable'
            type: array
      summary: Bulk Create Variables
      tags:
      - Variables
swagger: "2.0"
