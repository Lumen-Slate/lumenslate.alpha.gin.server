syntax = "proto3";

package ai_service;
option go_package = "internal/proto/ai_service;ai_service";

service AIService {
    rpc GenerateContext (GenerateContextRequest) returns (GenerateContextResponse);
    rpc DetectVariables (VariableDetectorRequest) returns (VariableDetectorResponse);
    rpc SegmentQuestion (QuestionSegmentationRequest) returns (QuestionSegmentationResponse);
    rpc GenerateMCQVariations (MCQRequest) returns (MCQVariation);
    rpc GenerateMSQVariations (MSQRequest) returns (MSQVariation);
    rpc FilterAndRandomize (FilterAndRandomizerRequest) returns (FilterAndRandomizerResponse);
    rpc LumenAgent (AgentRequest) returns (AgentResponse);
    rpc RAGAgent (RAGAgentRequest) returns (RAGAgentResponse);
}

// --- /context_generator.py ---
message GenerateContextRequest {
    string question = 1;
    repeated string keywords = 2;
    string language = 3;
}
message GenerateContextResponse {
    string content = 1;
}

// --- /variable_detector.py ---
message VariableDetectorRequest {
    string question = 1;
}
message VariableDetectorResponse {
    repeated DetectedVariable variables = 1;
}
message DetectedVariable {
    string name = 1;
    string value = 2;
    repeated int32 namePositions = 3;
    repeated int32 valuePositions = 4;
}

// --- /question_segmentation.py ---
message QuestionSegmentationRequest {
    string question = 1;
}
message QuestionSegmentationResponse {
    string segmentedQuestion = 1;
}

// --- /mcq_variation_generator.py ---
message MCQRequest {
    string question = 1;
    repeated string options = 2;
    int32 answerIndex = 3;
}
message MCQVariation {
    repeated MCQQuestion variations = 1;
}
message MCQQuestion {
    string question = 1;
    repeated string options = 2;
    int32 answerIndex = 3;
}

// --- /msq_variation_generator.py ---
message MSQRequest {
    string question = 1;
    repeated string options = 2;
    repeated int32 answerIndices = 3;
}
message MSQVariation {
    repeated MSQQuestion variations = 1;
}
message MSQQuestion {
    string question = 1;
    repeated string options = 2;
    repeated int32 answerIndices = 3;
}

// --- /variable_randomizer.py ---
message FilterAndRandomizerRequest {
    string question = 1;
    string userPrompt = 2;
}
message FilterAndRandomizerResponse {
    repeated RandomizedVariable variables = 1;
}
message RandomizedVariable {
    string name = 1;
    // value can be int or string, so use string for proto3
    string value = 2;
    VariableFilter filters = 3;
}
message VariableFilter {
    repeated int32 range = 1;
    repeated string options = 2;
}

// --- /agent_service.proto ---
message AgentRequest {
    string file = 1;
    string fileType = 2;
    string teacherId = 3;
    string role = 4;
    string message = 5;
    string createdAt = 6;
    string updatedAt = 7;
}

message AgentResponse {
    string message = 1; // generic success or error message
    string teacherId = 2;
    string agent_name = 3;
    string agent_response = 4; // structured JSON as string
    string session_id = 5;
    string createdAt = 6;
    string updatedAt = 7;
    string response_time = 8;
    string role = 9; // teacher, student
    string feedback = 10; // positive, negative, default=null
}

message RAGAgentRequest {
    string corpusName = 1;
    string message = 2;
    string role = 3;
    string createdAt = 4;
    string updatedAt = 5;
}

message RAGAgentResponse {
    string message = 1;
    string corpusName = 2;
    string agent_name = 3;
    string agent_response = 4;
    string session_id = 5;
    string createdAt = 6;
    string updatedAt = 7;
    string response_time = 8;
    string role = 9;
    string feedback = 10;
}