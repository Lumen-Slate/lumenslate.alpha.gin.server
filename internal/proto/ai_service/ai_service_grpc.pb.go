// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: internal/proto/ai_service.proto

package ai_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIService_GenerateContext_FullMethodName       = "/ai_service.AIService/GenerateContext"
	AIService_DetectVariables_FullMethodName       = "/ai_service.AIService/DetectVariables"
	AIService_SegmentQuestion_FullMethodName       = "/ai_service.AIService/SegmentQuestion"
	AIService_GenerateMCQVariations_FullMethodName = "/ai_service.AIService/GenerateMCQVariations"
	AIService_GenerateMSQVariations_FullMethodName = "/ai_service.AIService/GenerateMSQVariations"
	AIService_FilterAndRandomize_FullMethodName    = "/ai_service.AIService/FilterAndRandomize"
	AIService_Agent_FullMethodName                 = "/ai_service.AIService/Agent"
	AIService_RAGAgent_FullMethodName              = "/ai_service.AIService/RAGAgent"
)

// AIServiceClient is the client API for AIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIServiceClient interface {
	GenerateContext(ctx context.Context, in *GenerateContextRequest, opts ...grpc.CallOption) (*GenerateContextResponse, error)
	DetectVariables(ctx context.Context, in *VariableDetectorRequest, opts ...grpc.CallOption) (*VariableDetectorResponse, error)
	SegmentQuestion(ctx context.Context, in *QuestionSegmentationRequest, opts ...grpc.CallOption) (*QuestionSegmentationResponse, error)
	GenerateMCQVariations(ctx context.Context, in *MCQRequest, opts ...grpc.CallOption) (*MCQVariation, error)
	GenerateMSQVariations(ctx context.Context, in *MSQRequest, opts ...grpc.CallOption) (*MSQVariation, error)
	FilterAndRandomize(ctx context.Context, in *FilterAndRandomizerRequest, opts ...grpc.CallOption) (*FilterAndRandomizerResponse, error)
	Agent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error)
	RAGAgent(ctx context.Context, in *RAGAgentRequest, opts ...grpc.CallOption) (*RAGAgentResponse, error)
}

type aIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIServiceClient(cc grpc.ClientConnInterface) AIServiceClient {
	return &aIServiceClient{cc}
}

func (c *aIServiceClient) GenerateContext(ctx context.Context, in *GenerateContextRequest, opts ...grpc.CallOption) (*GenerateContextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateContextResponse)
	err := c.cc.Invoke(ctx, AIService_GenerateContext_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) DetectVariables(ctx context.Context, in *VariableDetectorRequest, opts ...grpc.CallOption) (*VariableDetectorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VariableDetectorResponse)
	err := c.cc.Invoke(ctx, AIService_DetectVariables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) SegmentQuestion(ctx context.Context, in *QuestionSegmentationRequest, opts ...grpc.CallOption) (*QuestionSegmentationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QuestionSegmentationResponse)
	err := c.cc.Invoke(ctx, AIService_SegmentQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GenerateMCQVariations(ctx context.Context, in *MCQRequest, opts ...grpc.CallOption) (*MCQVariation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MCQVariation)
	err := c.cc.Invoke(ctx, AIService_GenerateMCQVariations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) GenerateMSQVariations(ctx context.Context, in *MSQRequest, opts ...grpc.CallOption) (*MSQVariation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MSQVariation)
	err := c.cc.Invoke(ctx, AIService_GenerateMSQVariations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) FilterAndRandomize(ctx context.Context, in *FilterAndRandomizerRequest, opts ...grpc.CallOption) (*FilterAndRandomizerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilterAndRandomizerResponse)
	err := c.cc.Invoke(ctx, AIService_FilterAndRandomize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) Agent(ctx context.Context, in *AgentRequest, opts ...grpc.CallOption) (*AgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentResponse)
	err := c.cc.Invoke(ctx, AIService_Agent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIServiceClient) RAGAgent(ctx context.Context, in *RAGAgentRequest, opts ...grpc.CallOption) (*RAGAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RAGAgentResponse)
	err := c.cc.Invoke(ctx, AIService_RAGAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AIServiceServer is the server API for AIService service.
// All implementations must embed UnimplementedAIServiceServer
// for forward compatibility.
type AIServiceServer interface {
	GenerateContext(context.Context, *GenerateContextRequest) (*GenerateContextResponse, error)
	DetectVariables(context.Context, *VariableDetectorRequest) (*VariableDetectorResponse, error)
	SegmentQuestion(context.Context, *QuestionSegmentationRequest) (*QuestionSegmentationResponse, error)
	GenerateMCQVariations(context.Context, *MCQRequest) (*MCQVariation, error)
	GenerateMSQVariations(context.Context, *MSQRequest) (*MSQVariation, error)
	FilterAndRandomize(context.Context, *FilterAndRandomizerRequest) (*FilterAndRandomizerResponse, error)
	Agent(context.Context, *AgentRequest) (*AgentResponse, error)
	RAGAgent(context.Context, *RAGAgentRequest) (*RAGAgentResponse, error)
	mustEmbedUnimplementedAIServiceServer()
}

// UnimplementedAIServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIServiceServer struct{}

func (UnimplementedAIServiceServer) GenerateContext(context.Context, *GenerateContextRequest) (*GenerateContextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateContext not implemented")
}
func (UnimplementedAIServiceServer) DetectVariables(context.Context, *VariableDetectorRequest) (*VariableDetectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectVariables not implemented")
}
func (UnimplementedAIServiceServer) SegmentQuestion(context.Context, *QuestionSegmentationRequest) (*QuestionSegmentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SegmentQuestion not implemented")
}
func (UnimplementedAIServiceServer) GenerateMCQVariations(context.Context, *MCQRequest) (*MCQVariation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMCQVariations not implemented")
}
func (UnimplementedAIServiceServer) GenerateMSQVariations(context.Context, *MSQRequest) (*MSQVariation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMSQVariations not implemented")
}
func (UnimplementedAIServiceServer) FilterAndRandomize(context.Context, *FilterAndRandomizerRequest) (*FilterAndRandomizerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterAndRandomize not implemented")
}
func (UnimplementedAIServiceServer) Agent(context.Context, *AgentRequest) (*AgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Agent not implemented")
}
func (UnimplementedAIServiceServer) RAGAgent(context.Context, *RAGAgentRequest) (*RAGAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RAGAgent not implemented")
}
func (UnimplementedAIServiceServer) mustEmbedUnimplementedAIServiceServer() {}
func (UnimplementedAIServiceServer) testEmbeddedByValue()                   {}

// UnsafeAIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIServiceServer will
// result in compilation errors.
type UnsafeAIServiceServer interface {
	mustEmbedUnimplementedAIServiceServer()
}

func RegisterAIServiceServer(s grpc.ServiceRegistrar, srv AIServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIService_ServiceDesc, srv)
}

func _AIService_GenerateContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GenerateContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GenerateContext_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GenerateContext(ctx, req.(*GenerateContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_DetectVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VariableDetectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).DetectVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_DetectVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).DetectVariables(ctx, req.(*VariableDetectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_SegmentQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuestionSegmentationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).SegmentQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_SegmentQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).SegmentQuestion(ctx, req.(*QuestionSegmentationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GenerateMCQVariations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MCQRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GenerateMCQVariations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GenerateMCQVariations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GenerateMCQVariations(ctx, req.(*MCQRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_GenerateMSQVariations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MSQRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).GenerateMSQVariations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_GenerateMSQVariations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).GenerateMSQVariations(ctx, req.(*MSQRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_FilterAndRandomize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterAndRandomizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).FilterAndRandomize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_FilterAndRandomize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).FilterAndRandomize(ctx, req.(*FilterAndRandomizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_Agent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).Agent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_Agent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).Agent(ctx, req.(*AgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIService_RAGAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RAGAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIServiceServer).RAGAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIService_RAGAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIServiceServer).RAGAgent(ctx, req.(*RAGAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AIService_ServiceDesc is the grpc.ServiceDesc for AIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ai_service.AIService",
	HandlerType: (*AIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateContext",
			Handler:    _AIService_GenerateContext_Handler,
		},
		{
			MethodName: "DetectVariables",
			Handler:    _AIService_DetectVariables_Handler,
		},
		{
			MethodName: "SegmentQuestion",
			Handler:    _AIService_SegmentQuestion_Handler,
		},
		{
			MethodName: "GenerateMCQVariations",
			Handler:    _AIService_GenerateMCQVariations_Handler,
		},
		{
			MethodName: "GenerateMSQVariations",
			Handler:    _AIService_GenerateMSQVariations_Handler,
		},
		{
			MethodName: "FilterAndRandomize",
			Handler:    _AIService_FilterAndRandomize_Handler,
		},
		{
			MethodName: "Agent",
			Handler:    _AIService_Agent_Handler,
		},
		{
			MethodName: "RAGAgent",
			Handler:    _AIService_RAGAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/ai_service.proto",
}
